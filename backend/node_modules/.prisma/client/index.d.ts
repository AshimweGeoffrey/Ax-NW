
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Branch
 * 
 */
export type Branch = $Result.DefaultSelection<Prisma.$BranchPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Inventory
 * 
 */
export type Inventory = $Result.DefaultSelection<Prisma.$InventoryPayload>
/**
 * Model PaymentMethod
 * 
 */
export type PaymentMethod = $Result.DefaultSelection<Prisma.$PaymentMethodPayload>
/**
 * Model SaleWeekly
 * 
 */
export type SaleWeekly = $Result.DefaultSelection<Prisma.$SaleWeeklyPayload>
/**
 * Model OutgoingStock
 * 
 */
export type OutgoingStock = $Result.DefaultSelection<Prisma.$OutgoingStockPayload>
/**
 * Model Remark
 * 
 */
export type Remark = $Result.DefaultSelection<Prisma.$RemarkPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.branch`: Exposes CRUD operations for the **Branch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Branches
    * const branches = await prisma.branch.findMany()
    * ```
    */
  get branch(): Prisma.BranchDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.inventory`: Exposes CRUD operations for the **Inventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inventories
    * const inventories = await prisma.inventory.findMany()
    * ```
    */
  get inventory(): Prisma.InventoryDelegate<ExtArgs>;

  /**
   * `prisma.paymentMethod`: Exposes CRUD operations for the **PaymentMethod** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentMethods
    * const paymentMethods = await prisma.paymentMethod.findMany()
    * ```
    */
  get paymentMethod(): Prisma.PaymentMethodDelegate<ExtArgs>;

  /**
   * `prisma.saleWeekly`: Exposes CRUD operations for the **SaleWeekly** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SaleWeeklies
    * const saleWeeklies = await prisma.saleWeekly.findMany()
    * ```
    */
  get saleWeekly(): Prisma.SaleWeeklyDelegate<ExtArgs>;

  /**
   * `prisma.outgoingStock`: Exposes CRUD operations for the **OutgoingStock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OutgoingStocks
    * const outgoingStocks = await prisma.outgoingStock.findMany()
    * ```
    */
  get outgoingStock(): Prisma.OutgoingStockDelegate<ExtArgs>;

  /**
   * `prisma.remark`: Exposes CRUD operations for the **Remark** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Remarks
    * const remarks = await prisma.remark.findMany()
    * ```
    */
  get remark(): Prisma.RemarkDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Branch: 'Branch',
    Category: 'Category',
    Inventory: 'Inventory',
    PaymentMethod: 'PaymentMethod',
    SaleWeekly: 'SaleWeekly',
    OutgoingStock: 'OutgoingStock',
    Remark: 'Remark'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "branch" | "category" | "inventory" | "paymentMethod" | "saleWeekly" | "outgoingStock" | "remark"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Branch: {
        payload: Prisma.$BranchPayload<ExtArgs>
        fields: Prisma.BranchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BranchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BranchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          findFirst: {
            args: Prisma.BranchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BranchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          findMany: {
            args: Prisma.BranchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>[]
          }
          create: {
            args: Prisma.BranchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          createMany: {
            args: Prisma.BranchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BranchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          update: {
            args: Prisma.BranchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          deleteMany: {
            args: Prisma.BranchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BranchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BranchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          aggregate: {
            args: Prisma.BranchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBranch>
          }
          groupBy: {
            args: Prisma.BranchGroupByArgs<ExtArgs>
            result: $Utils.Optional<BranchGroupByOutputType>[]
          }
          count: {
            args: Prisma.BranchCountArgs<ExtArgs>
            result: $Utils.Optional<BranchCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Inventory: {
        payload: Prisma.$InventoryPayload<ExtArgs>
        fields: Prisma.InventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findFirst: {
            args: Prisma.InventoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findMany: {
            args: Prisma.InventoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          create: {
            args: Prisma.InventoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          createMany: {
            args: Prisma.InventoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InventoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          update: {
            args: Prisma.InventoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          deleteMany: {
            args: Prisma.InventoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          aggregate: {
            args: Prisma.InventoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventory>
          }
          groupBy: {
            args: Prisma.InventoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryCountAggregateOutputType> | number
          }
        }
      }
      PaymentMethod: {
        payload: Prisma.$PaymentMethodPayload<ExtArgs>
        fields: Prisma.PaymentMethodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentMethodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentMethodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          findFirst: {
            args: Prisma.PaymentMethodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentMethodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          findMany: {
            args: Prisma.PaymentMethodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>[]
          }
          create: {
            args: Prisma.PaymentMethodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          createMany: {
            args: Prisma.PaymentMethodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PaymentMethodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          update: {
            args: Prisma.PaymentMethodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          deleteMany: {
            args: Prisma.PaymentMethodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentMethodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentMethodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          aggregate: {
            args: Prisma.PaymentMethodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentMethod>
          }
          groupBy: {
            args: Prisma.PaymentMethodGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentMethodGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentMethodCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentMethodCountAggregateOutputType> | number
          }
        }
      }
      SaleWeekly: {
        payload: Prisma.$SaleWeeklyPayload<ExtArgs>
        fields: Prisma.SaleWeeklyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SaleWeeklyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleWeeklyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SaleWeeklyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleWeeklyPayload>
          }
          findFirst: {
            args: Prisma.SaleWeeklyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleWeeklyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SaleWeeklyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleWeeklyPayload>
          }
          findMany: {
            args: Prisma.SaleWeeklyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleWeeklyPayload>[]
          }
          create: {
            args: Prisma.SaleWeeklyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleWeeklyPayload>
          }
          createMany: {
            args: Prisma.SaleWeeklyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SaleWeeklyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleWeeklyPayload>
          }
          update: {
            args: Prisma.SaleWeeklyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleWeeklyPayload>
          }
          deleteMany: {
            args: Prisma.SaleWeeklyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SaleWeeklyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SaleWeeklyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SaleWeeklyPayload>
          }
          aggregate: {
            args: Prisma.SaleWeeklyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSaleWeekly>
          }
          groupBy: {
            args: Prisma.SaleWeeklyGroupByArgs<ExtArgs>
            result: $Utils.Optional<SaleWeeklyGroupByOutputType>[]
          }
          count: {
            args: Prisma.SaleWeeklyCountArgs<ExtArgs>
            result: $Utils.Optional<SaleWeeklyCountAggregateOutputType> | number
          }
        }
      }
      OutgoingStock: {
        payload: Prisma.$OutgoingStockPayload<ExtArgs>
        fields: Prisma.OutgoingStockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OutgoingStockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutgoingStockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OutgoingStockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutgoingStockPayload>
          }
          findFirst: {
            args: Prisma.OutgoingStockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutgoingStockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OutgoingStockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutgoingStockPayload>
          }
          findMany: {
            args: Prisma.OutgoingStockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutgoingStockPayload>[]
          }
          create: {
            args: Prisma.OutgoingStockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutgoingStockPayload>
          }
          createMany: {
            args: Prisma.OutgoingStockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OutgoingStockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutgoingStockPayload>
          }
          update: {
            args: Prisma.OutgoingStockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutgoingStockPayload>
          }
          deleteMany: {
            args: Prisma.OutgoingStockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OutgoingStockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OutgoingStockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutgoingStockPayload>
          }
          aggregate: {
            args: Prisma.OutgoingStockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOutgoingStock>
          }
          groupBy: {
            args: Prisma.OutgoingStockGroupByArgs<ExtArgs>
            result: $Utils.Optional<OutgoingStockGroupByOutputType>[]
          }
          count: {
            args: Prisma.OutgoingStockCountArgs<ExtArgs>
            result: $Utils.Optional<OutgoingStockCountAggregateOutputType> | number
          }
        }
      }
      Remark: {
        payload: Prisma.$RemarkPayload<ExtArgs>
        fields: Prisma.RemarkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RemarkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RemarkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RemarkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RemarkPayload>
          }
          findFirst: {
            args: Prisma.RemarkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RemarkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RemarkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RemarkPayload>
          }
          findMany: {
            args: Prisma.RemarkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RemarkPayload>[]
          }
          create: {
            args: Prisma.RemarkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RemarkPayload>
          }
          createMany: {
            args: Prisma.RemarkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RemarkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RemarkPayload>
          }
          update: {
            args: Prisma.RemarkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RemarkPayload>
          }
          deleteMany: {
            args: Prisma.RemarkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RemarkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RemarkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RemarkPayload>
          }
          aggregate: {
            args: Prisma.RemarkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRemark>
          }
          groupBy: {
            args: Prisma.RemarkGroupByArgs<ExtArgs>
            result: $Utils.Optional<RemarkGroupByOutputType>[]
          }
          count: {
            args: Prisma.RemarkCountArgs<ExtArgs>
            result: $Utils.Optional<RemarkCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    salesWeekly: number
    outgoingStock: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    salesWeekly?: boolean | UserCountOutputTypeCountSalesWeeklyArgs
    outgoingStock?: boolean | UserCountOutputTypeCountOutgoingStockArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSalesWeeklyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleWeeklyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOutgoingStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OutgoingStockWhereInput
  }


  /**
   * Count Type BranchCountOutputType
   */

  export type BranchCountOutputType = {
    outgoingStock: number
  }

  export type BranchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outgoingStock?: boolean | BranchCountOutputTypeCountOutgoingStockArgs
  }

  // Custom InputTypes
  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchCountOutputType
     */
    select?: BranchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountOutgoingStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OutgoingStockWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    inventory: number
    outgoingStock: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | CategoryCountOutputTypeCountInventoryArgs
    outgoingStock?: boolean | CategoryCountOutputTypeCountOutgoingStockArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountOutgoingStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OutgoingStockWhereInput
  }


  /**
   * Count Type InventoryCountOutputType
   */

  export type InventoryCountOutputType = {
    salesWeekly: number
    outgoingStock: number
  }

  export type InventoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    salesWeekly?: boolean | InventoryCountOutputTypeCountSalesWeeklyArgs
    outgoingStock?: boolean | InventoryCountOutputTypeCountOutgoingStockArgs
  }

  // Custom InputTypes
  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountOutputType
     */
    select?: InventoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountSalesWeeklyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleWeeklyWhereInput
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountOutgoingStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OutgoingStockWhereInput
  }


  /**
   * Count Type PaymentMethodCountOutputType
   */

  export type PaymentMethodCountOutputType = {
    salesWeekly: number
  }

  export type PaymentMethodCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    salesWeekly?: boolean | PaymentMethodCountOutputTypeCountSalesWeeklyArgs
  }

  // Custom InputTypes
  /**
   * PaymentMethodCountOutputType without action
   */
  export type PaymentMethodCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethodCountOutputType
     */
    select?: PaymentMethodCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PaymentMethodCountOutputType without action
   */
  export type PaymentMethodCountOutputTypeCountSalesWeeklyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleWeeklyWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    name: string | null
    id: string | null
    password: string | null
    accessControl: string | null
    email: string | null
  }

  export type UserMaxAggregateOutputType = {
    name: string | null
    id: string | null
    password: string | null
    accessControl: string | null
    email: string | null
  }

  export type UserCountAggregateOutputType = {
    name: number
    id: number
    password: number
    accessControl: number
    email: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    name?: true
    id?: true
    password?: true
    accessControl?: true
    email?: true
  }

  export type UserMaxAggregateInputType = {
    name?: true
    id?: true
    password?: true
    accessControl?: true
    email?: true
  }

  export type UserCountAggregateInputType = {
    name?: true
    id?: true
    password?: true
    accessControl?: true
    email?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    name: string
    id: string
    password: string | null
    accessControl: string | null
    email: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    id?: boolean
    password?: boolean
    accessControl?: boolean
    email?: boolean
    salesWeekly?: boolean | User$salesWeeklyArgs<ExtArgs>
    outgoingStock?: boolean | User$outgoingStockArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    name?: boolean
    id?: boolean
    password?: boolean
    accessControl?: boolean
    email?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    salesWeekly?: boolean | User$salesWeeklyArgs<ExtArgs>
    outgoingStock?: boolean | User$outgoingStockArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      salesWeekly: Prisma.$SaleWeeklyPayload<ExtArgs>[]
      outgoingStock: Prisma.$OutgoingStockPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      id: string
      password: string | null
      accessControl: string | null
      email: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const userWithNameOnly = await prisma.user.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    salesWeekly<T extends User$salesWeeklyArgs<ExtArgs> = {}>(args?: Subset<T, User$salesWeeklyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleWeeklyPayload<ExtArgs>, T, "findMany"> | Null>
    outgoingStock<T extends User$outgoingStockArgs<ExtArgs> = {}>(args?: Subset<T, User$outgoingStockArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutgoingStockPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly name: FieldRef<"User", 'String'>
    readonly id: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly accessControl: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.salesWeekly
   */
  export type User$salesWeeklyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleWeekly
     */
    select?: SaleWeeklySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleWeeklyInclude<ExtArgs> | null
    where?: SaleWeeklyWhereInput
    orderBy?: SaleWeeklyOrderByWithRelationInput | SaleWeeklyOrderByWithRelationInput[]
    cursor?: SaleWeeklyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleWeeklyScalarFieldEnum | SaleWeeklyScalarFieldEnum[]
  }

  /**
   * User.outgoingStock
   */
  export type User$outgoingStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutgoingStock
     */
    select?: OutgoingStockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutgoingStockInclude<ExtArgs> | null
    where?: OutgoingStockWhereInput
    orderBy?: OutgoingStockOrderByWithRelationInput | OutgoingStockOrderByWithRelationInput[]
    cursor?: OutgoingStockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OutgoingStockScalarFieldEnum | OutgoingStockScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Branch
   */

  export type AggregateBranch = {
    _count: BranchCountAggregateOutputType | null
    _min: BranchMinAggregateOutputType | null
    _max: BranchMaxAggregateOutputType | null
  }

  export type BranchMinAggregateOutputType = {
    name: string | null
    id: string | null
  }

  export type BranchMaxAggregateOutputType = {
    name: string | null
    id: string | null
  }

  export type BranchCountAggregateOutputType = {
    name: number
    id: number
    _all: number
  }


  export type BranchMinAggregateInputType = {
    name?: true
    id?: true
  }

  export type BranchMaxAggregateInputType = {
    name?: true
    id?: true
  }

  export type BranchCountAggregateInputType = {
    name?: true
    id?: true
    _all?: true
  }

  export type BranchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Branch to aggregate.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Branches
    **/
    _count?: true | BranchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BranchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BranchMaxAggregateInputType
  }

  export type GetBranchAggregateType<T extends BranchAggregateArgs> = {
        [P in keyof T & keyof AggregateBranch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBranch[P]>
      : GetScalarType<T[P], AggregateBranch[P]>
  }




  export type BranchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BranchWhereInput
    orderBy?: BranchOrderByWithAggregationInput | BranchOrderByWithAggregationInput[]
    by: BranchScalarFieldEnum[] | BranchScalarFieldEnum
    having?: BranchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BranchCountAggregateInputType | true
    _min?: BranchMinAggregateInputType
    _max?: BranchMaxAggregateInputType
  }

  export type BranchGroupByOutputType = {
    name: string
    id: string
    _count: BranchCountAggregateOutputType | null
    _min: BranchMinAggregateOutputType | null
    _max: BranchMaxAggregateOutputType | null
  }

  type GetBranchGroupByPayload<T extends BranchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BranchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BranchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BranchGroupByOutputType[P]>
            : GetScalarType<T[P], BranchGroupByOutputType[P]>
        }
      >
    >


  export type BranchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    id?: boolean
    outgoingStock?: boolean | Branch$outgoingStockArgs<ExtArgs>
    _count?: boolean | BranchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["branch"]>


  export type BranchSelectScalar = {
    name?: boolean
    id?: boolean
  }

  export type BranchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outgoingStock?: boolean | Branch$outgoingStockArgs<ExtArgs>
    _count?: boolean | BranchCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BranchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Branch"
    objects: {
      outgoingStock: Prisma.$OutgoingStockPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      id: string
    }, ExtArgs["result"]["branch"]>
    composites: {}
  }

  type BranchGetPayload<S extends boolean | null | undefined | BranchDefaultArgs> = $Result.GetResult<Prisma.$BranchPayload, S>

  type BranchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BranchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BranchCountAggregateInputType | true
    }

  export interface BranchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Branch'], meta: { name: 'Branch' } }
    /**
     * Find zero or one Branch that matches the filter.
     * @param {BranchFindUniqueArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BranchFindUniqueArgs>(args: SelectSubset<T, BranchFindUniqueArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Branch that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BranchFindUniqueOrThrowArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BranchFindUniqueOrThrowArgs>(args: SelectSubset<T, BranchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Branch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindFirstArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BranchFindFirstArgs>(args?: SelectSubset<T, BranchFindFirstArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Branch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindFirstOrThrowArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BranchFindFirstOrThrowArgs>(args?: SelectSubset<T, BranchFindFirstOrThrowArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Branches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Branches
     * const branches = await prisma.branch.findMany()
     * 
     * // Get first 10 Branches
     * const branches = await prisma.branch.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const branchWithNameOnly = await prisma.branch.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends BranchFindManyArgs>(args?: SelectSubset<T, BranchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Branch.
     * @param {BranchCreateArgs} args - Arguments to create a Branch.
     * @example
     * // Create one Branch
     * const Branch = await prisma.branch.create({
     *   data: {
     *     // ... data to create a Branch
     *   }
     * })
     * 
     */
    create<T extends BranchCreateArgs>(args: SelectSubset<T, BranchCreateArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Branches.
     * @param {BranchCreateManyArgs} args - Arguments to create many Branches.
     * @example
     * // Create many Branches
     * const branch = await prisma.branch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BranchCreateManyArgs>(args?: SelectSubset<T, BranchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Branch.
     * @param {BranchDeleteArgs} args - Arguments to delete one Branch.
     * @example
     * // Delete one Branch
     * const Branch = await prisma.branch.delete({
     *   where: {
     *     // ... filter to delete one Branch
     *   }
     * })
     * 
     */
    delete<T extends BranchDeleteArgs>(args: SelectSubset<T, BranchDeleteArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Branch.
     * @param {BranchUpdateArgs} args - Arguments to update one Branch.
     * @example
     * // Update one Branch
     * const branch = await prisma.branch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BranchUpdateArgs>(args: SelectSubset<T, BranchUpdateArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Branches.
     * @param {BranchDeleteManyArgs} args - Arguments to filter Branches to delete.
     * @example
     * // Delete a few Branches
     * const { count } = await prisma.branch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BranchDeleteManyArgs>(args?: SelectSubset<T, BranchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Branches
     * const branch = await prisma.branch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BranchUpdateManyArgs>(args: SelectSubset<T, BranchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Branch.
     * @param {BranchUpsertArgs} args - Arguments to update or create a Branch.
     * @example
     * // Update or create a Branch
     * const branch = await prisma.branch.upsert({
     *   create: {
     *     // ... data to create a Branch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Branch we want to update
     *   }
     * })
     */
    upsert<T extends BranchUpsertArgs>(args: SelectSubset<T, BranchUpsertArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchCountArgs} args - Arguments to filter Branches to count.
     * @example
     * // Count the number of Branches
     * const count = await prisma.branch.count({
     *   where: {
     *     // ... the filter for the Branches we want to count
     *   }
     * })
    **/
    count<T extends BranchCountArgs>(
      args?: Subset<T, BranchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BranchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Branch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BranchAggregateArgs>(args: Subset<T, BranchAggregateArgs>): Prisma.PrismaPromise<GetBranchAggregateType<T>>

    /**
     * Group by Branch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BranchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BranchGroupByArgs['orderBy'] }
        : { orderBy?: BranchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BranchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBranchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Branch model
   */
  readonly fields: BranchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Branch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BranchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    outgoingStock<T extends Branch$outgoingStockArgs<ExtArgs> = {}>(args?: Subset<T, Branch$outgoingStockArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutgoingStockPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Branch model
   */ 
  interface BranchFieldRefs {
    readonly name: FieldRef<"Branch", 'String'>
    readonly id: FieldRef<"Branch", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Branch findUnique
   */
  export type BranchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch findUniqueOrThrow
   */
  export type BranchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch findFirst
   */
  export type BranchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Branches.
     */
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch findFirstOrThrow
   */
  export type BranchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Branches.
     */
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch findMany
   */
  export type BranchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branches to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch create
   */
  export type BranchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The data needed to create a Branch.
     */
    data: XOR<BranchCreateInput, BranchUncheckedCreateInput>
  }

  /**
   * Branch createMany
   */
  export type BranchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Branches.
     */
    data: BranchCreateManyInput | BranchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Branch update
   */
  export type BranchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The data needed to update a Branch.
     */
    data: XOR<BranchUpdateInput, BranchUncheckedUpdateInput>
    /**
     * Choose, which Branch to update.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch updateMany
   */
  export type BranchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Branches.
     */
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyInput>
    /**
     * Filter which Branches to update
     */
    where?: BranchWhereInput
  }

  /**
   * Branch upsert
   */
  export type BranchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The filter to search for the Branch to update in case it exists.
     */
    where: BranchWhereUniqueInput
    /**
     * In case the Branch found by the `where` argument doesn't exist, create a new Branch with this data.
     */
    create: XOR<BranchCreateInput, BranchUncheckedCreateInput>
    /**
     * In case the Branch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BranchUpdateInput, BranchUncheckedUpdateInput>
  }

  /**
   * Branch delete
   */
  export type BranchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter which Branch to delete.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch deleteMany
   */
  export type BranchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Branches to delete
     */
    where?: BranchWhereInput
  }

  /**
   * Branch.outgoingStock
   */
  export type Branch$outgoingStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutgoingStock
     */
    select?: OutgoingStockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutgoingStockInclude<ExtArgs> | null
    where?: OutgoingStockWhereInput
    orderBy?: OutgoingStockOrderByWithRelationInput | OutgoingStockOrderByWithRelationInput[]
    cursor?: OutgoingStockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OutgoingStockScalarFieldEnum | OutgoingStockScalarFieldEnum[]
  }

  /**
   * Branch without action
   */
  export type BranchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    name: string | null
    id: string | null
    percentage: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    name: string | null
    id: string | null
    percentage: string | null
  }

  export type CategoryCountAggregateOutputType = {
    name: number
    id: number
    percentage: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    name?: true
    id?: true
    percentage?: true
  }

  export type CategoryMaxAggregateInputType = {
    name?: true
    id?: true
    percentage?: true
  }

  export type CategoryCountAggregateInputType = {
    name?: true
    id?: true
    percentage?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    name: string
    id: string
    percentage: string | null
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    id?: boolean
    percentage?: boolean
    inventory?: boolean | Category$inventoryArgs<ExtArgs>
    outgoingStock?: boolean | Category$outgoingStockArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>


  export type CategorySelectScalar = {
    name?: boolean
    id?: boolean
    percentage?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | Category$inventoryArgs<ExtArgs>
    outgoingStock?: boolean | Category$outgoingStockArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      inventory: Prisma.$InventoryPayload<ExtArgs>[]
      outgoingStock: Prisma.$OutgoingStockPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      id: string
      percentage: string | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const categoryWithNameOnly = await prisma.category.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends Category$inventoryArgs<ExtArgs> = {}>(args?: Subset<T, Category$inventoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany"> | Null>
    outgoingStock<T extends Category$outgoingStockArgs<ExtArgs> = {}>(args?: Subset<T, Category$outgoingStockArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutgoingStockPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly name: FieldRef<"Category", 'String'>
    readonly id: FieldRef<"Category", 'String'>
    readonly percentage: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.inventory
   */
  export type Category$inventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    cursor?: InventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Category.outgoingStock
   */
  export type Category$outgoingStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutgoingStock
     */
    select?: OutgoingStockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutgoingStockInclude<ExtArgs> | null
    where?: OutgoingStockWhereInput
    orderBy?: OutgoingStockOrderByWithRelationInput | OutgoingStockOrderByWithRelationInput[]
    cursor?: OutgoingStockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OutgoingStockScalarFieldEnum | OutgoingStockScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Inventory
   */

  export type AggregateInventory = {
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  export type InventoryAvgAggregateOutputType = {
    inventoryQuantity: number | null
    recentEntry: number | null
  }

  export type InventorySumAggregateOutputType = {
    inventoryQuantity: number | null
    recentEntry: number | null
  }

  export type InventoryMinAggregateOutputType = {
    name: string | null
    id: string | null
    categoryName: string | null
    inventoryQuantity: number | null
    incomingTimeStamp: Date | null
    recentEntry: number | null
    recentEntryAt: Date | null
  }

  export type InventoryMaxAggregateOutputType = {
    name: string | null
    id: string | null
    categoryName: string | null
    inventoryQuantity: number | null
    incomingTimeStamp: Date | null
    recentEntry: number | null
    recentEntryAt: Date | null
  }

  export type InventoryCountAggregateOutputType = {
    name: number
    id: number
    categoryName: number
    inventoryQuantity: number
    incomingTimeStamp: number
    recentEntry: number
    recentEntryAt: number
    _all: number
  }


  export type InventoryAvgAggregateInputType = {
    inventoryQuantity?: true
    recentEntry?: true
  }

  export type InventorySumAggregateInputType = {
    inventoryQuantity?: true
    recentEntry?: true
  }

  export type InventoryMinAggregateInputType = {
    name?: true
    id?: true
    categoryName?: true
    inventoryQuantity?: true
    incomingTimeStamp?: true
    recentEntry?: true
    recentEntryAt?: true
  }

  export type InventoryMaxAggregateInputType = {
    name?: true
    id?: true
    categoryName?: true
    inventoryQuantity?: true
    incomingTimeStamp?: true
    recentEntry?: true
    recentEntryAt?: true
  }

  export type InventoryCountAggregateInputType = {
    name?: true
    id?: true
    categoryName?: true
    inventoryQuantity?: true
    incomingTimeStamp?: true
    recentEntry?: true
    recentEntryAt?: true
    _all?: true
  }

  export type InventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventory to aggregate.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inventories
    **/
    _count?: true | InventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryMaxAggregateInputType
  }

  export type GetInventoryAggregateType<T extends InventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventory[P]>
      : GetScalarType<T[P], AggregateInventory[P]>
  }




  export type InventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithAggregationInput | InventoryOrderByWithAggregationInput[]
    by: InventoryScalarFieldEnum[] | InventoryScalarFieldEnum
    having?: InventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryCountAggregateInputType | true
    _avg?: InventoryAvgAggregateInputType
    _sum?: InventorySumAggregateInputType
    _min?: InventoryMinAggregateInputType
    _max?: InventoryMaxAggregateInputType
  }

  export type InventoryGroupByOutputType = {
    name: string
    id: string
    categoryName: string
    inventoryQuantity: number
    incomingTimeStamp: Date | null
    recentEntry: number
    recentEntryAt: Date | null
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  type GetInventoryGroupByPayload<T extends InventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryGroupByOutputType[P]>
        }
      >
    >


  export type InventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    id?: boolean
    categoryName?: boolean
    inventoryQuantity?: boolean
    incomingTimeStamp?: boolean
    recentEntry?: boolean
    recentEntryAt?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    salesWeekly?: boolean | Inventory$salesWeeklyArgs<ExtArgs>
    outgoingStock?: boolean | Inventory$outgoingStockArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>


  export type InventorySelectScalar = {
    name?: boolean
    id?: boolean
    categoryName?: boolean
    inventoryQuantity?: boolean
    incomingTimeStamp?: boolean
    recentEntry?: boolean
    recentEntryAt?: boolean
  }

  export type InventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    salesWeekly?: boolean | Inventory$salesWeeklyArgs<ExtArgs>
    outgoingStock?: boolean | Inventory$outgoingStockArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $InventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inventory"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      salesWeekly: Prisma.$SaleWeeklyPayload<ExtArgs>[]
      outgoingStock: Prisma.$OutgoingStockPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      id: string
      categoryName: string
      inventoryQuantity: number
      incomingTimeStamp: Date | null
      recentEntry: number
      recentEntryAt: Date | null
    }, ExtArgs["result"]["inventory"]>
    composites: {}
  }

  type InventoryGetPayload<S extends boolean | null | undefined | InventoryDefaultArgs> = $Result.GetResult<Prisma.$InventoryPayload, S>

  type InventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryCountAggregateInputType | true
    }

  export interface InventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inventory'], meta: { name: 'Inventory' } }
    /**
     * Find zero or one Inventory that matches the filter.
     * @param {InventoryFindUniqueArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryFindUniqueArgs>(args: SelectSubset<T, InventoryFindUniqueArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Inventory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryFindUniqueOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Inventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryFindFirstArgs>(args?: SelectSubset<T, InventoryFindFirstArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Inventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Inventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inventories
     * const inventories = await prisma.inventory.findMany()
     * 
     * // Get first 10 Inventories
     * const inventories = await prisma.inventory.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const inventoryWithNameOnly = await prisma.inventory.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends InventoryFindManyArgs>(args?: SelectSubset<T, InventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Inventory.
     * @param {InventoryCreateArgs} args - Arguments to create a Inventory.
     * @example
     * // Create one Inventory
     * const Inventory = await prisma.inventory.create({
     *   data: {
     *     // ... data to create a Inventory
     *   }
     * })
     * 
     */
    create<T extends InventoryCreateArgs>(args: SelectSubset<T, InventoryCreateArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Inventories.
     * @param {InventoryCreateManyArgs} args - Arguments to create many Inventories.
     * @example
     * // Create many Inventories
     * const inventory = await prisma.inventory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryCreateManyArgs>(args?: SelectSubset<T, InventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Inventory.
     * @param {InventoryDeleteArgs} args - Arguments to delete one Inventory.
     * @example
     * // Delete one Inventory
     * const Inventory = await prisma.inventory.delete({
     *   where: {
     *     // ... filter to delete one Inventory
     *   }
     * })
     * 
     */
    delete<T extends InventoryDeleteArgs>(args: SelectSubset<T, InventoryDeleteArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Inventory.
     * @param {InventoryUpdateArgs} args - Arguments to update one Inventory.
     * @example
     * // Update one Inventory
     * const inventory = await prisma.inventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryUpdateArgs>(args: SelectSubset<T, InventoryUpdateArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Inventories.
     * @param {InventoryDeleteManyArgs} args - Arguments to filter Inventories to delete.
     * @example
     * // Delete a few Inventories
     * const { count } = await prisma.inventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryDeleteManyArgs>(args?: SelectSubset<T, InventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inventories
     * const inventory = await prisma.inventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryUpdateManyArgs>(args: SelectSubset<T, InventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Inventory.
     * @param {InventoryUpsertArgs} args - Arguments to update or create a Inventory.
     * @example
     * // Update or create a Inventory
     * const inventory = await prisma.inventory.upsert({
     *   create: {
     *     // ... data to create a Inventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inventory we want to update
     *   }
     * })
     */
    upsert<T extends InventoryUpsertArgs>(args: SelectSubset<T, InventoryUpsertArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountArgs} args - Arguments to filter Inventories to count.
     * @example
     * // Count the number of Inventories
     * const count = await prisma.inventory.count({
     *   where: {
     *     // ... the filter for the Inventories we want to count
     *   }
     * })
    **/
    count<T extends InventoryCountArgs>(
      args?: Subset<T, InventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryAggregateArgs>(args: Subset<T, InventoryAggregateArgs>): Prisma.PrismaPromise<GetInventoryAggregateType<T>>

    /**
     * Group by Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryGroupByArgs['orderBy'] }
        : { orderBy?: InventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inventory model
   */
  readonly fields: InventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    salesWeekly<T extends Inventory$salesWeeklyArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$salesWeeklyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleWeeklyPayload<ExtArgs>, T, "findMany"> | Null>
    outgoingStock<T extends Inventory$outgoingStockArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$outgoingStockArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutgoingStockPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Inventory model
   */ 
  interface InventoryFieldRefs {
    readonly name: FieldRef<"Inventory", 'String'>
    readonly id: FieldRef<"Inventory", 'String'>
    readonly categoryName: FieldRef<"Inventory", 'String'>
    readonly inventoryQuantity: FieldRef<"Inventory", 'Int'>
    readonly incomingTimeStamp: FieldRef<"Inventory", 'DateTime'>
    readonly recentEntry: FieldRef<"Inventory", 'Int'>
    readonly recentEntryAt: FieldRef<"Inventory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Inventory findUnique
   */
  export type InventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory findUniqueOrThrow
   */
  export type InventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory findFirst
   */
  export type InventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory findFirstOrThrow
   */
  export type InventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory findMany
   */
  export type InventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventories to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory create
   */
  export type InventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Inventory.
     */
    data: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
  }

  /**
   * Inventory createMany
   */
  export type InventoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Inventories.
     */
    data: InventoryCreateManyInput | InventoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Inventory update
   */
  export type InventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Inventory.
     */
    data: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
    /**
     * Choose, which Inventory to update.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory updateMany
   */
  export type InventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inventories.
     */
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyInput>
    /**
     * Filter which Inventories to update
     */
    where?: InventoryWhereInput
  }

  /**
   * Inventory upsert
   */
  export type InventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Inventory to update in case it exists.
     */
    where: InventoryWhereUniqueInput
    /**
     * In case the Inventory found by the `where` argument doesn't exist, create a new Inventory with this data.
     */
    create: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
    /**
     * In case the Inventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
  }

  /**
   * Inventory delete
   */
  export type InventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter which Inventory to delete.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory deleteMany
   */
  export type InventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventories to delete
     */
    where?: InventoryWhereInput
  }

  /**
   * Inventory.salesWeekly
   */
  export type Inventory$salesWeeklyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleWeekly
     */
    select?: SaleWeeklySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleWeeklyInclude<ExtArgs> | null
    where?: SaleWeeklyWhereInput
    orderBy?: SaleWeeklyOrderByWithRelationInput | SaleWeeklyOrderByWithRelationInput[]
    cursor?: SaleWeeklyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleWeeklyScalarFieldEnum | SaleWeeklyScalarFieldEnum[]
  }

  /**
   * Inventory.outgoingStock
   */
  export type Inventory$outgoingStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutgoingStock
     */
    select?: OutgoingStockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutgoingStockInclude<ExtArgs> | null
    where?: OutgoingStockWhereInput
    orderBy?: OutgoingStockOrderByWithRelationInput | OutgoingStockOrderByWithRelationInput[]
    cursor?: OutgoingStockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OutgoingStockScalarFieldEnum | OutgoingStockScalarFieldEnum[]
  }

  /**
   * Inventory without action
   */
  export type InventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
  }


  /**
   * Model PaymentMethod
   */

  export type AggregatePaymentMethod = {
    _count: PaymentMethodCountAggregateOutputType | null
    _avg: PaymentMethodAvgAggregateOutputType | null
    _sum: PaymentMethodSumAggregateOutputType | null
    _min: PaymentMethodMinAggregateOutputType | null
    _max: PaymentMethodMaxAggregateOutputType | null
  }

  export type PaymentMethodAvgAggregateOutputType = {
    totalWeekly: number | null
  }

  export type PaymentMethodSumAggregateOutputType = {
    totalWeekly: number | null
  }

  export type PaymentMethodMinAggregateOutputType = {
    name: string | null
    paymentId: string | null
    totalWeekly: number | null
  }

  export type PaymentMethodMaxAggregateOutputType = {
    name: string | null
    paymentId: string | null
    totalWeekly: number | null
  }

  export type PaymentMethodCountAggregateOutputType = {
    name: number
    paymentId: number
    totalWeekly: number
    _all: number
  }


  export type PaymentMethodAvgAggregateInputType = {
    totalWeekly?: true
  }

  export type PaymentMethodSumAggregateInputType = {
    totalWeekly?: true
  }

  export type PaymentMethodMinAggregateInputType = {
    name?: true
    paymentId?: true
    totalWeekly?: true
  }

  export type PaymentMethodMaxAggregateInputType = {
    name?: true
    paymentId?: true
    totalWeekly?: true
  }

  export type PaymentMethodCountAggregateInputType = {
    name?: true
    paymentId?: true
    totalWeekly?: true
    _all?: true
  }

  export type PaymentMethodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentMethod to aggregate.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentMethods
    **/
    _count?: true | PaymentMethodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentMethodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentMethodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMethodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMethodMaxAggregateInputType
  }

  export type GetPaymentMethodAggregateType<T extends PaymentMethodAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentMethod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentMethod[P]>
      : GetScalarType<T[P], AggregatePaymentMethod[P]>
  }




  export type PaymentMethodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentMethodWhereInput
    orderBy?: PaymentMethodOrderByWithAggregationInput | PaymentMethodOrderByWithAggregationInput[]
    by: PaymentMethodScalarFieldEnum[] | PaymentMethodScalarFieldEnum
    having?: PaymentMethodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentMethodCountAggregateInputType | true
    _avg?: PaymentMethodAvgAggregateInputType
    _sum?: PaymentMethodSumAggregateInputType
    _min?: PaymentMethodMinAggregateInputType
    _max?: PaymentMethodMaxAggregateInputType
  }

  export type PaymentMethodGroupByOutputType = {
    name: string
    paymentId: string | null
    totalWeekly: number
    _count: PaymentMethodCountAggregateOutputType | null
    _avg: PaymentMethodAvgAggregateOutputType | null
    _sum: PaymentMethodSumAggregateOutputType | null
    _min: PaymentMethodMinAggregateOutputType | null
    _max: PaymentMethodMaxAggregateOutputType | null
  }

  type GetPaymentMethodGroupByPayload<T extends PaymentMethodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentMethodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentMethodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentMethodGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentMethodGroupByOutputType[P]>
        }
      >
    >


  export type PaymentMethodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    paymentId?: boolean
    totalWeekly?: boolean
    salesWeekly?: boolean | PaymentMethod$salesWeeklyArgs<ExtArgs>
    _count?: boolean | PaymentMethodCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentMethod"]>


  export type PaymentMethodSelectScalar = {
    name?: boolean
    paymentId?: boolean
    totalWeekly?: boolean
  }

  export type PaymentMethodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    salesWeekly?: boolean | PaymentMethod$salesWeeklyArgs<ExtArgs>
    _count?: boolean | PaymentMethodCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PaymentMethodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentMethod"
    objects: {
      salesWeekly: Prisma.$SaleWeeklyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      paymentId: string | null
      totalWeekly: number
    }, ExtArgs["result"]["paymentMethod"]>
    composites: {}
  }

  type PaymentMethodGetPayload<S extends boolean | null | undefined | PaymentMethodDefaultArgs> = $Result.GetResult<Prisma.$PaymentMethodPayload, S>

  type PaymentMethodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentMethodFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentMethodCountAggregateInputType | true
    }

  export interface PaymentMethodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentMethod'], meta: { name: 'PaymentMethod' } }
    /**
     * Find zero or one PaymentMethod that matches the filter.
     * @param {PaymentMethodFindUniqueArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentMethodFindUniqueArgs>(args: SelectSubset<T, PaymentMethodFindUniqueArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PaymentMethod that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentMethodFindUniqueOrThrowArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentMethodFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentMethodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PaymentMethod that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindFirstArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentMethodFindFirstArgs>(args?: SelectSubset<T, PaymentMethodFindFirstArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PaymentMethod that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindFirstOrThrowArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentMethodFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentMethodFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PaymentMethods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentMethods
     * const paymentMethods = await prisma.paymentMethod.findMany()
     * 
     * // Get first 10 PaymentMethods
     * const paymentMethods = await prisma.paymentMethod.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const paymentMethodWithNameOnly = await prisma.paymentMethod.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends PaymentMethodFindManyArgs>(args?: SelectSubset<T, PaymentMethodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PaymentMethod.
     * @param {PaymentMethodCreateArgs} args - Arguments to create a PaymentMethod.
     * @example
     * // Create one PaymentMethod
     * const PaymentMethod = await prisma.paymentMethod.create({
     *   data: {
     *     // ... data to create a PaymentMethod
     *   }
     * })
     * 
     */
    create<T extends PaymentMethodCreateArgs>(args: SelectSubset<T, PaymentMethodCreateArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PaymentMethods.
     * @param {PaymentMethodCreateManyArgs} args - Arguments to create many PaymentMethods.
     * @example
     * // Create many PaymentMethods
     * const paymentMethod = await prisma.paymentMethod.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentMethodCreateManyArgs>(args?: SelectSubset<T, PaymentMethodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PaymentMethod.
     * @param {PaymentMethodDeleteArgs} args - Arguments to delete one PaymentMethod.
     * @example
     * // Delete one PaymentMethod
     * const PaymentMethod = await prisma.paymentMethod.delete({
     *   where: {
     *     // ... filter to delete one PaymentMethod
     *   }
     * })
     * 
     */
    delete<T extends PaymentMethodDeleteArgs>(args: SelectSubset<T, PaymentMethodDeleteArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PaymentMethod.
     * @param {PaymentMethodUpdateArgs} args - Arguments to update one PaymentMethod.
     * @example
     * // Update one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentMethodUpdateArgs>(args: SelectSubset<T, PaymentMethodUpdateArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PaymentMethods.
     * @param {PaymentMethodDeleteManyArgs} args - Arguments to filter PaymentMethods to delete.
     * @example
     * // Delete a few PaymentMethods
     * const { count } = await prisma.paymentMethod.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentMethodDeleteManyArgs>(args?: SelectSubset<T, PaymentMethodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentMethods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentMethods
     * const paymentMethod = await prisma.paymentMethod.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentMethodUpdateManyArgs>(args: SelectSubset<T, PaymentMethodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentMethod.
     * @param {PaymentMethodUpsertArgs} args - Arguments to update or create a PaymentMethod.
     * @example
     * // Update or create a PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.upsert({
     *   create: {
     *     // ... data to create a PaymentMethod
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentMethod we want to update
     *   }
     * })
     */
    upsert<T extends PaymentMethodUpsertArgs>(args: SelectSubset<T, PaymentMethodUpsertArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PaymentMethods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodCountArgs} args - Arguments to filter PaymentMethods to count.
     * @example
     * // Count the number of PaymentMethods
     * const count = await prisma.paymentMethod.count({
     *   where: {
     *     // ... the filter for the PaymentMethods we want to count
     *   }
     * })
    **/
    count<T extends PaymentMethodCountArgs>(
      args?: Subset<T, PaymentMethodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentMethodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentMethod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentMethodAggregateArgs>(args: Subset<T, PaymentMethodAggregateArgs>): Prisma.PrismaPromise<GetPaymentMethodAggregateType<T>>

    /**
     * Group by PaymentMethod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentMethodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentMethodGroupByArgs['orderBy'] }
        : { orderBy?: PaymentMethodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentMethodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentMethodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentMethod model
   */
  readonly fields: PaymentMethodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentMethod.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentMethodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    salesWeekly<T extends PaymentMethod$salesWeeklyArgs<ExtArgs> = {}>(args?: Subset<T, PaymentMethod$salesWeeklyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleWeeklyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentMethod model
   */ 
  interface PaymentMethodFieldRefs {
    readonly name: FieldRef<"PaymentMethod", 'String'>
    readonly paymentId: FieldRef<"PaymentMethod", 'String'>
    readonly totalWeekly: FieldRef<"PaymentMethod", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PaymentMethod findUnique
   */
  export type PaymentMethodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod findUniqueOrThrow
   */
  export type PaymentMethodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod findFirst
   */
  export type PaymentMethodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentMethods.
     */
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[]
  }

  /**
   * PaymentMethod findFirstOrThrow
   */
  export type PaymentMethodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentMethods.
     */
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[]
  }

  /**
   * PaymentMethod findMany
   */
  export type PaymentMethodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethods to fetch.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[]
  }

  /**
   * PaymentMethod create
   */
  export type PaymentMethodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentMethod.
     */
    data: XOR<PaymentMethodCreateInput, PaymentMethodUncheckedCreateInput>
  }

  /**
   * PaymentMethod createMany
   */
  export type PaymentMethodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentMethods.
     */
    data: PaymentMethodCreateManyInput | PaymentMethodCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentMethod update
   */
  export type PaymentMethodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentMethod.
     */
    data: XOR<PaymentMethodUpdateInput, PaymentMethodUncheckedUpdateInput>
    /**
     * Choose, which PaymentMethod to update.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod updateMany
   */
  export type PaymentMethodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentMethods.
     */
    data: XOR<PaymentMethodUpdateManyMutationInput, PaymentMethodUncheckedUpdateManyInput>
    /**
     * Filter which PaymentMethods to update
     */
    where?: PaymentMethodWhereInput
  }

  /**
   * PaymentMethod upsert
   */
  export type PaymentMethodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentMethod to update in case it exists.
     */
    where: PaymentMethodWhereUniqueInput
    /**
     * In case the PaymentMethod found by the `where` argument doesn't exist, create a new PaymentMethod with this data.
     */
    create: XOR<PaymentMethodCreateInput, PaymentMethodUncheckedCreateInput>
    /**
     * In case the PaymentMethod was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentMethodUpdateInput, PaymentMethodUncheckedUpdateInput>
  }

  /**
   * PaymentMethod delete
   */
  export type PaymentMethodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter which PaymentMethod to delete.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod deleteMany
   */
  export type PaymentMethodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentMethods to delete
     */
    where?: PaymentMethodWhereInput
  }

  /**
   * PaymentMethod.salesWeekly
   */
  export type PaymentMethod$salesWeeklyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleWeekly
     */
    select?: SaleWeeklySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleWeeklyInclude<ExtArgs> | null
    where?: SaleWeeklyWhereInput
    orderBy?: SaleWeeklyOrderByWithRelationInput | SaleWeeklyOrderByWithRelationInput[]
    cursor?: SaleWeeklyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleWeeklyScalarFieldEnum | SaleWeeklyScalarFieldEnum[]
  }

  /**
   * PaymentMethod without action
   */
  export type PaymentMethodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
  }


  /**
   * Model SaleWeekly
   */

  export type AggregateSaleWeekly = {
    _count: SaleWeeklyCountAggregateOutputType | null
    _avg: SaleWeeklyAvgAggregateOutputType | null
    _sum: SaleWeeklySumAggregateOutputType | null
    _min: SaleWeeklyMinAggregateOutputType | null
    _max: SaleWeeklyMaxAggregateOutputType | null
  }

  export type SaleWeeklyAvgAggregateOutputType = {
    quantity: number | null
    price: number | null
  }

  export type SaleWeeklySumAggregateOutputType = {
    quantity: number | null
    price: number | null
  }

  export type SaleWeeklyMinAggregateOutputType = {
    id: string | null
    itemName: string | null
    category: string | null
    quantity: number | null
    price: number | null
    userName: string | null
    timeStamp: Date | null
    paymentMethod: string | null
  }

  export type SaleWeeklyMaxAggregateOutputType = {
    id: string | null
    itemName: string | null
    category: string | null
    quantity: number | null
    price: number | null
    userName: string | null
    timeStamp: Date | null
    paymentMethod: string | null
  }

  export type SaleWeeklyCountAggregateOutputType = {
    id: number
    itemName: number
    category: number
    quantity: number
    price: number
    userName: number
    timeStamp: number
    paymentMethod: number
    _all: number
  }


  export type SaleWeeklyAvgAggregateInputType = {
    quantity?: true
    price?: true
  }

  export type SaleWeeklySumAggregateInputType = {
    quantity?: true
    price?: true
  }

  export type SaleWeeklyMinAggregateInputType = {
    id?: true
    itemName?: true
    category?: true
    quantity?: true
    price?: true
    userName?: true
    timeStamp?: true
    paymentMethod?: true
  }

  export type SaleWeeklyMaxAggregateInputType = {
    id?: true
    itemName?: true
    category?: true
    quantity?: true
    price?: true
    userName?: true
    timeStamp?: true
    paymentMethod?: true
  }

  export type SaleWeeklyCountAggregateInputType = {
    id?: true
    itemName?: true
    category?: true
    quantity?: true
    price?: true
    userName?: true
    timeStamp?: true
    paymentMethod?: true
    _all?: true
  }

  export type SaleWeeklyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaleWeekly to aggregate.
     */
    where?: SaleWeeklyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleWeeklies to fetch.
     */
    orderBy?: SaleWeeklyOrderByWithRelationInput | SaleWeeklyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SaleWeeklyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleWeeklies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleWeeklies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SaleWeeklies
    **/
    _count?: true | SaleWeeklyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaleWeeklyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaleWeeklySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaleWeeklyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaleWeeklyMaxAggregateInputType
  }

  export type GetSaleWeeklyAggregateType<T extends SaleWeeklyAggregateArgs> = {
        [P in keyof T & keyof AggregateSaleWeekly]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSaleWeekly[P]>
      : GetScalarType<T[P], AggregateSaleWeekly[P]>
  }




  export type SaleWeeklyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleWeeklyWhereInput
    orderBy?: SaleWeeklyOrderByWithAggregationInput | SaleWeeklyOrderByWithAggregationInput[]
    by: SaleWeeklyScalarFieldEnum[] | SaleWeeklyScalarFieldEnum
    having?: SaleWeeklyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaleWeeklyCountAggregateInputType | true
    _avg?: SaleWeeklyAvgAggregateInputType
    _sum?: SaleWeeklySumAggregateInputType
    _min?: SaleWeeklyMinAggregateInputType
    _max?: SaleWeeklyMaxAggregateInputType
  }

  export type SaleWeeklyGroupByOutputType = {
    id: string
    itemName: string | null
    category: string | null
    quantity: number
    price: number
    userName: string | null
    timeStamp: Date | null
    paymentMethod: string | null
    _count: SaleWeeklyCountAggregateOutputType | null
    _avg: SaleWeeklyAvgAggregateOutputType | null
    _sum: SaleWeeklySumAggregateOutputType | null
    _min: SaleWeeklyMinAggregateOutputType | null
    _max: SaleWeeklyMaxAggregateOutputType | null
  }

  type GetSaleWeeklyGroupByPayload<T extends SaleWeeklyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaleWeeklyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaleWeeklyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaleWeeklyGroupByOutputType[P]>
            : GetScalarType<T[P], SaleWeeklyGroupByOutputType[P]>
        }
      >
    >


  export type SaleWeeklySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemName?: boolean
    category?: boolean
    quantity?: boolean
    price?: boolean
    userName?: boolean
    timeStamp?: boolean
    paymentMethod?: boolean
    user?: boolean | SaleWeekly$userArgs<ExtArgs>
    item?: boolean | SaleWeekly$itemArgs<ExtArgs>
    payment?: boolean | SaleWeekly$paymentArgs<ExtArgs>
  }, ExtArgs["result"]["saleWeekly"]>


  export type SaleWeeklySelectScalar = {
    id?: boolean
    itemName?: boolean
    category?: boolean
    quantity?: boolean
    price?: boolean
    userName?: boolean
    timeStamp?: boolean
    paymentMethod?: boolean
  }

  export type SaleWeeklyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | SaleWeekly$userArgs<ExtArgs>
    item?: boolean | SaleWeekly$itemArgs<ExtArgs>
    payment?: boolean | SaleWeekly$paymentArgs<ExtArgs>
  }

  export type $SaleWeeklyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SaleWeekly"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      item: Prisma.$InventoryPayload<ExtArgs> | null
      payment: Prisma.$PaymentMethodPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      itemName: string | null
      category: string | null
      quantity: number
      price: number
      userName: string | null
      timeStamp: Date | null
      paymentMethod: string | null
    }, ExtArgs["result"]["saleWeekly"]>
    composites: {}
  }

  type SaleWeeklyGetPayload<S extends boolean | null | undefined | SaleWeeklyDefaultArgs> = $Result.GetResult<Prisma.$SaleWeeklyPayload, S>

  type SaleWeeklyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SaleWeeklyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SaleWeeklyCountAggregateInputType | true
    }

  export interface SaleWeeklyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SaleWeekly'], meta: { name: 'SaleWeekly' } }
    /**
     * Find zero or one SaleWeekly that matches the filter.
     * @param {SaleWeeklyFindUniqueArgs} args - Arguments to find a SaleWeekly
     * @example
     * // Get one SaleWeekly
     * const saleWeekly = await prisma.saleWeekly.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SaleWeeklyFindUniqueArgs>(args: SelectSubset<T, SaleWeeklyFindUniqueArgs<ExtArgs>>): Prisma__SaleWeeklyClient<$Result.GetResult<Prisma.$SaleWeeklyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SaleWeekly that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SaleWeeklyFindUniqueOrThrowArgs} args - Arguments to find a SaleWeekly
     * @example
     * // Get one SaleWeekly
     * const saleWeekly = await prisma.saleWeekly.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SaleWeeklyFindUniqueOrThrowArgs>(args: SelectSubset<T, SaleWeeklyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SaleWeeklyClient<$Result.GetResult<Prisma.$SaleWeeklyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SaleWeekly that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleWeeklyFindFirstArgs} args - Arguments to find a SaleWeekly
     * @example
     * // Get one SaleWeekly
     * const saleWeekly = await prisma.saleWeekly.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SaleWeeklyFindFirstArgs>(args?: SelectSubset<T, SaleWeeklyFindFirstArgs<ExtArgs>>): Prisma__SaleWeeklyClient<$Result.GetResult<Prisma.$SaleWeeklyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SaleWeekly that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleWeeklyFindFirstOrThrowArgs} args - Arguments to find a SaleWeekly
     * @example
     * // Get one SaleWeekly
     * const saleWeekly = await prisma.saleWeekly.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SaleWeeklyFindFirstOrThrowArgs>(args?: SelectSubset<T, SaleWeeklyFindFirstOrThrowArgs<ExtArgs>>): Prisma__SaleWeeklyClient<$Result.GetResult<Prisma.$SaleWeeklyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SaleWeeklies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleWeeklyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SaleWeeklies
     * const saleWeeklies = await prisma.saleWeekly.findMany()
     * 
     * // Get first 10 SaleWeeklies
     * const saleWeeklies = await prisma.saleWeekly.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saleWeeklyWithIdOnly = await prisma.saleWeekly.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SaleWeeklyFindManyArgs>(args?: SelectSubset<T, SaleWeeklyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaleWeeklyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SaleWeekly.
     * @param {SaleWeeklyCreateArgs} args - Arguments to create a SaleWeekly.
     * @example
     * // Create one SaleWeekly
     * const SaleWeekly = await prisma.saleWeekly.create({
     *   data: {
     *     // ... data to create a SaleWeekly
     *   }
     * })
     * 
     */
    create<T extends SaleWeeklyCreateArgs>(args: SelectSubset<T, SaleWeeklyCreateArgs<ExtArgs>>): Prisma__SaleWeeklyClient<$Result.GetResult<Prisma.$SaleWeeklyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SaleWeeklies.
     * @param {SaleWeeklyCreateManyArgs} args - Arguments to create many SaleWeeklies.
     * @example
     * // Create many SaleWeeklies
     * const saleWeekly = await prisma.saleWeekly.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SaleWeeklyCreateManyArgs>(args?: SelectSubset<T, SaleWeeklyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SaleWeekly.
     * @param {SaleWeeklyDeleteArgs} args - Arguments to delete one SaleWeekly.
     * @example
     * // Delete one SaleWeekly
     * const SaleWeekly = await prisma.saleWeekly.delete({
     *   where: {
     *     // ... filter to delete one SaleWeekly
     *   }
     * })
     * 
     */
    delete<T extends SaleWeeklyDeleteArgs>(args: SelectSubset<T, SaleWeeklyDeleteArgs<ExtArgs>>): Prisma__SaleWeeklyClient<$Result.GetResult<Prisma.$SaleWeeklyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SaleWeekly.
     * @param {SaleWeeklyUpdateArgs} args - Arguments to update one SaleWeekly.
     * @example
     * // Update one SaleWeekly
     * const saleWeekly = await prisma.saleWeekly.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SaleWeeklyUpdateArgs>(args: SelectSubset<T, SaleWeeklyUpdateArgs<ExtArgs>>): Prisma__SaleWeeklyClient<$Result.GetResult<Prisma.$SaleWeeklyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SaleWeeklies.
     * @param {SaleWeeklyDeleteManyArgs} args - Arguments to filter SaleWeeklies to delete.
     * @example
     * // Delete a few SaleWeeklies
     * const { count } = await prisma.saleWeekly.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SaleWeeklyDeleteManyArgs>(args?: SelectSubset<T, SaleWeeklyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SaleWeeklies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleWeeklyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SaleWeeklies
     * const saleWeekly = await prisma.saleWeekly.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SaleWeeklyUpdateManyArgs>(args: SelectSubset<T, SaleWeeklyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SaleWeekly.
     * @param {SaleWeeklyUpsertArgs} args - Arguments to update or create a SaleWeekly.
     * @example
     * // Update or create a SaleWeekly
     * const saleWeekly = await prisma.saleWeekly.upsert({
     *   create: {
     *     // ... data to create a SaleWeekly
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SaleWeekly we want to update
     *   }
     * })
     */
    upsert<T extends SaleWeeklyUpsertArgs>(args: SelectSubset<T, SaleWeeklyUpsertArgs<ExtArgs>>): Prisma__SaleWeeklyClient<$Result.GetResult<Prisma.$SaleWeeklyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SaleWeeklies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleWeeklyCountArgs} args - Arguments to filter SaleWeeklies to count.
     * @example
     * // Count the number of SaleWeeklies
     * const count = await prisma.saleWeekly.count({
     *   where: {
     *     // ... the filter for the SaleWeeklies we want to count
     *   }
     * })
    **/
    count<T extends SaleWeeklyCountArgs>(
      args?: Subset<T, SaleWeeklyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaleWeeklyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SaleWeekly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleWeeklyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaleWeeklyAggregateArgs>(args: Subset<T, SaleWeeklyAggregateArgs>): Prisma.PrismaPromise<GetSaleWeeklyAggregateType<T>>

    /**
     * Group by SaleWeekly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleWeeklyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaleWeeklyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaleWeeklyGroupByArgs['orderBy'] }
        : { orderBy?: SaleWeeklyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaleWeeklyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaleWeeklyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SaleWeekly model
   */
  readonly fields: SaleWeeklyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SaleWeekly.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SaleWeeklyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends SaleWeekly$userArgs<ExtArgs> = {}>(args?: Subset<T, SaleWeekly$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    item<T extends SaleWeekly$itemArgs<ExtArgs> = {}>(args?: Subset<T, SaleWeekly$itemArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    payment<T extends SaleWeekly$paymentArgs<ExtArgs> = {}>(args?: Subset<T, SaleWeekly$paymentArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SaleWeekly model
   */ 
  interface SaleWeeklyFieldRefs {
    readonly id: FieldRef<"SaleWeekly", 'String'>
    readonly itemName: FieldRef<"SaleWeekly", 'String'>
    readonly category: FieldRef<"SaleWeekly", 'String'>
    readonly quantity: FieldRef<"SaleWeekly", 'Int'>
    readonly price: FieldRef<"SaleWeekly", 'Int'>
    readonly userName: FieldRef<"SaleWeekly", 'String'>
    readonly timeStamp: FieldRef<"SaleWeekly", 'DateTime'>
    readonly paymentMethod: FieldRef<"SaleWeekly", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SaleWeekly findUnique
   */
  export type SaleWeeklyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleWeekly
     */
    select?: SaleWeeklySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleWeeklyInclude<ExtArgs> | null
    /**
     * Filter, which SaleWeekly to fetch.
     */
    where: SaleWeeklyWhereUniqueInput
  }

  /**
   * SaleWeekly findUniqueOrThrow
   */
  export type SaleWeeklyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleWeekly
     */
    select?: SaleWeeklySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleWeeklyInclude<ExtArgs> | null
    /**
     * Filter, which SaleWeekly to fetch.
     */
    where: SaleWeeklyWhereUniqueInput
  }

  /**
   * SaleWeekly findFirst
   */
  export type SaleWeeklyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleWeekly
     */
    select?: SaleWeeklySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleWeeklyInclude<ExtArgs> | null
    /**
     * Filter, which SaleWeekly to fetch.
     */
    where?: SaleWeeklyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleWeeklies to fetch.
     */
    orderBy?: SaleWeeklyOrderByWithRelationInput | SaleWeeklyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaleWeeklies.
     */
    cursor?: SaleWeeklyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleWeeklies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleWeeklies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaleWeeklies.
     */
    distinct?: SaleWeeklyScalarFieldEnum | SaleWeeklyScalarFieldEnum[]
  }

  /**
   * SaleWeekly findFirstOrThrow
   */
  export type SaleWeeklyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleWeekly
     */
    select?: SaleWeeklySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleWeeklyInclude<ExtArgs> | null
    /**
     * Filter, which SaleWeekly to fetch.
     */
    where?: SaleWeeklyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleWeeklies to fetch.
     */
    orderBy?: SaleWeeklyOrderByWithRelationInput | SaleWeeklyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaleWeeklies.
     */
    cursor?: SaleWeeklyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleWeeklies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleWeeklies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaleWeeklies.
     */
    distinct?: SaleWeeklyScalarFieldEnum | SaleWeeklyScalarFieldEnum[]
  }

  /**
   * SaleWeekly findMany
   */
  export type SaleWeeklyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleWeekly
     */
    select?: SaleWeeklySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleWeeklyInclude<ExtArgs> | null
    /**
     * Filter, which SaleWeeklies to fetch.
     */
    where?: SaleWeeklyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleWeeklies to fetch.
     */
    orderBy?: SaleWeeklyOrderByWithRelationInput | SaleWeeklyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SaleWeeklies.
     */
    cursor?: SaleWeeklyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleWeeklies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleWeeklies.
     */
    skip?: number
    distinct?: SaleWeeklyScalarFieldEnum | SaleWeeklyScalarFieldEnum[]
  }

  /**
   * SaleWeekly create
   */
  export type SaleWeeklyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleWeekly
     */
    select?: SaleWeeklySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleWeeklyInclude<ExtArgs> | null
    /**
     * The data needed to create a SaleWeekly.
     */
    data: XOR<SaleWeeklyCreateInput, SaleWeeklyUncheckedCreateInput>
  }

  /**
   * SaleWeekly createMany
   */
  export type SaleWeeklyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SaleWeeklies.
     */
    data: SaleWeeklyCreateManyInput | SaleWeeklyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SaleWeekly update
   */
  export type SaleWeeklyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleWeekly
     */
    select?: SaleWeeklySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleWeeklyInclude<ExtArgs> | null
    /**
     * The data needed to update a SaleWeekly.
     */
    data: XOR<SaleWeeklyUpdateInput, SaleWeeklyUncheckedUpdateInput>
    /**
     * Choose, which SaleWeekly to update.
     */
    where: SaleWeeklyWhereUniqueInput
  }

  /**
   * SaleWeekly updateMany
   */
  export type SaleWeeklyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SaleWeeklies.
     */
    data: XOR<SaleWeeklyUpdateManyMutationInput, SaleWeeklyUncheckedUpdateManyInput>
    /**
     * Filter which SaleWeeklies to update
     */
    where?: SaleWeeklyWhereInput
  }

  /**
   * SaleWeekly upsert
   */
  export type SaleWeeklyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleWeekly
     */
    select?: SaleWeeklySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleWeeklyInclude<ExtArgs> | null
    /**
     * The filter to search for the SaleWeekly to update in case it exists.
     */
    where: SaleWeeklyWhereUniqueInput
    /**
     * In case the SaleWeekly found by the `where` argument doesn't exist, create a new SaleWeekly with this data.
     */
    create: XOR<SaleWeeklyCreateInput, SaleWeeklyUncheckedCreateInput>
    /**
     * In case the SaleWeekly was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SaleWeeklyUpdateInput, SaleWeeklyUncheckedUpdateInput>
  }

  /**
   * SaleWeekly delete
   */
  export type SaleWeeklyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleWeekly
     */
    select?: SaleWeeklySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleWeeklyInclude<ExtArgs> | null
    /**
     * Filter which SaleWeekly to delete.
     */
    where: SaleWeeklyWhereUniqueInput
  }

  /**
   * SaleWeekly deleteMany
   */
  export type SaleWeeklyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaleWeeklies to delete
     */
    where?: SaleWeeklyWhereInput
  }

  /**
   * SaleWeekly.user
   */
  export type SaleWeekly$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * SaleWeekly.item
   */
  export type SaleWeekly$itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    where?: InventoryWhereInput
  }

  /**
   * SaleWeekly.payment
   */
  export type SaleWeekly$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    where?: PaymentMethodWhereInput
  }

  /**
   * SaleWeekly without action
   */
  export type SaleWeeklyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleWeekly
     */
    select?: SaleWeeklySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleWeeklyInclude<ExtArgs> | null
  }


  /**
   * Model OutgoingStock
   */

  export type AggregateOutgoingStock = {
    _count: OutgoingStockCountAggregateOutputType | null
    _avg: OutgoingStockAvgAggregateOutputType | null
    _sum: OutgoingStockSumAggregateOutputType | null
    _min: OutgoingStockMinAggregateOutputType | null
    _max: OutgoingStockMaxAggregateOutputType | null
  }

  export type OutgoingStockAvgAggregateOutputType = {
    quantity: number | null
  }

  export type OutgoingStockSumAggregateOutputType = {
    quantity: number | null
  }

  export type OutgoingStockMinAggregateOutputType = {
    id: string | null
    itemName: string | null
    categoryName: string | null
    userName: string | null
    branchName: string | null
    quantity: number | null
    timeStamp: Date | null
  }

  export type OutgoingStockMaxAggregateOutputType = {
    id: string | null
    itemName: string | null
    categoryName: string | null
    userName: string | null
    branchName: string | null
    quantity: number | null
    timeStamp: Date | null
  }

  export type OutgoingStockCountAggregateOutputType = {
    id: number
    itemName: number
    categoryName: number
    userName: number
    branchName: number
    quantity: number
    timeStamp: number
    _all: number
  }


  export type OutgoingStockAvgAggregateInputType = {
    quantity?: true
  }

  export type OutgoingStockSumAggregateInputType = {
    quantity?: true
  }

  export type OutgoingStockMinAggregateInputType = {
    id?: true
    itemName?: true
    categoryName?: true
    userName?: true
    branchName?: true
    quantity?: true
    timeStamp?: true
  }

  export type OutgoingStockMaxAggregateInputType = {
    id?: true
    itemName?: true
    categoryName?: true
    userName?: true
    branchName?: true
    quantity?: true
    timeStamp?: true
  }

  export type OutgoingStockCountAggregateInputType = {
    id?: true
    itemName?: true
    categoryName?: true
    userName?: true
    branchName?: true
    quantity?: true
    timeStamp?: true
    _all?: true
  }

  export type OutgoingStockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OutgoingStock to aggregate.
     */
    where?: OutgoingStockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OutgoingStocks to fetch.
     */
    orderBy?: OutgoingStockOrderByWithRelationInput | OutgoingStockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OutgoingStockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OutgoingStocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OutgoingStocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OutgoingStocks
    **/
    _count?: true | OutgoingStockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OutgoingStockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OutgoingStockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OutgoingStockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OutgoingStockMaxAggregateInputType
  }

  export type GetOutgoingStockAggregateType<T extends OutgoingStockAggregateArgs> = {
        [P in keyof T & keyof AggregateOutgoingStock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOutgoingStock[P]>
      : GetScalarType<T[P], AggregateOutgoingStock[P]>
  }




  export type OutgoingStockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OutgoingStockWhereInput
    orderBy?: OutgoingStockOrderByWithAggregationInput | OutgoingStockOrderByWithAggregationInput[]
    by: OutgoingStockScalarFieldEnum[] | OutgoingStockScalarFieldEnum
    having?: OutgoingStockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OutgoingStockCountAggregateInputType | true
    _avg?: OutgoingStockAvgAggregateInputType
    _sum?: OutgoingStockSumAggregateInputType
    _min?: OutgoingStockMinAggregateInputType
    _max?: OutgoingStockMaxAggregateInputType
  }

  export type OutgoingStockGroupByOutputType = {
    id: string
    itemName: string
    categoryName: string
    userName: string | null
    branchName: string | null
    quantity: number
    timeStamp: Date | null
    _count: OutgoingStockCountAggregateOutputType | null
    _avg: OutgoingStockAvgAggregateOutputType | null
    _sum: OutgoingStockSumAggregateOutputType | null
    _min: OutgoingStockMinAggregateOutputType | null
    _max: OutgoingStockMaxAggregateOutputType | null
  }

  type GetOutgoingStockGroupByPayload<T extends OutgoingStockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OutgoingStockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OutgoingStockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OutgoingStockGroupByOutputType[P]>
            : GetScalarType<T[P], OutgoingStockGroupByOutputType[P]>
        }
      >
    >


  export type OutgoingStockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemName?: boolean
    categoryName?: boolean
    userName?: boolean
    branchName?: boolean
    quantity?: boolean
    timeStamp?: boolean
    item?: boolean | InventoryDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    user?: boolean | OutgoingStock$userArgs<ExtArgs>
    branch?: boolean | OutgoingStock$branchArgs<ExtArgs>
  }, ExtArgs["result"]["outgoingStock"]>


  export type OutgoingStockSelectScalar = {
    id?: boolean
    itemName?: boolean
    categoryName?: boolean
    userName?: boolean
    branchName?: boolean
    quantity?: boolean
    timeStamp?: boolean
  }

  export type OutgoingStockInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | InventoryDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    user?: boolean | OutgoingStock$userArgs<ExtArgs>
    branch?: boolean | OutgoingStock$branchArgs<ExtArgs>
  }

  export type $OutgoingStockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OutgoingStock"
    objects: {
      item: Prisma.$InventoryPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
      branch: Prisma.$BranchPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      itemName: string
      categoryName: string
      userName: string | null
      branchName: string | null
      quantity: number
      timeStamp: Date | null
    }, ExtArgs["result"]["outgoingStock"]>
    composites: {}
  }

  type OutgoingStockGetPayload<S extends boolean | null | undefined | OutgoingStockDefaultArgs> = $Result.GetResult<Prisma.$OutgoingStockPayload, S>

  type OutgoingStockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OutgoingStockFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OutgoingStockCountAggregateInputType | true
    }

  export interface OutgoingStockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OutgoingStock'], meta: { name: 'OutgoingStock' } }
    /**
     * Find zero or one OutgoingStock that matches the filter.
     * @param {OutgoingStockFindUniqueArgs} args - Arguments to find a OutgoingStock
     * @example
     * // Get one OutgoingStock
     * const outgoingStock = await prisma.outgoingStock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OutgoingStockFindUniqueArgs>(args: SelectSubset<T, OutgoingStockFindUniqueArgs<ExtArgs>>): Prisma__OutgoingStockClient<$Result.GetResult<Prisma.$OutgoingStockPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OutgoingStock that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OutgoingStockFindUniqueOrThrowArgs} args - Arguments to find a OutgoingStock
     * @example
     * // Get one OutgoingStock
     * const outgoingStock = await prisma.outgoingStock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OutgoingStockFindUniqueOrThrowArgs>(args: SelectSubset<T, OutgoingStockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OutgoingStockClient<$Result.GetResult<Prisma.$OutgoingStockPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OutgoingStock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutgoingStockFindFirstArgs} args - Arguments to find a OutgoingStock
     * @example
     * // Get one OutgoingStock
     * const outgoingStock = await prisma.outgoingStock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OutgoingStockFindFirstArgs>(args?: SelectSubset<T, OutgoingStockFindFirstArgs<ExtArgs>>): Prisma__OutgoingStockClient<$Result.GetResult<Prisma.$OutgoingStockPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OutgoingStock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutgoingStockFindFirstOrThrowArgs} args - Arguments to find a OutgoingStock
     * @example
     * // Get one OutgoingStock
     * const outgoingStock = await prisma.outgoingStock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OutgoingStockFindFirstOrThrowArgs>(args?: SelectSubset<T, OutgoingStockFindFirstOrThrowArgs<ExtArgs>>): Prisma__OutgoingStockClient<$Result.GetResult<Prisma.$OutgoingStockPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OutgoingStocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutgoingStockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OutgoingStocks
     * const outgoingStocks = await prisma.outgoingStock.findMany()
     * 
     * // Get first 10 OutgoingStocks
     * const outgoingStocks = await prisma.outgoingStock.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const outgoingStockWithIdOnly = await prisma.outgoingStock.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OutgoingStockFindManyArgs>(args?: SelectSubset<T, OutgoingStockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutgoingStockPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OutgoingStock.
     * @param {OutgoingStockCreateArgs} args - Arguments to create a OutgoingStock.
     * @example
     * // Create one OutgoingStock
     * const OutgoingStock = await prisma.outgoingStock.create({
     *   data: {
     *     // ... data to create a OutgoingStock
     *   }
     * })
     * 
     */
    create<T extends OutgoingStockCreateArgs>(args: SelectSubset<T, OutgoingStockCreateArgs<ExtArgs>>): Prisma__OutgoingStockClient<$Result.GetResult<Prisma.$OutgoingStockPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OutgoingStocks.
     * @param {OutgoingStockCreateManyArgs} args - Arguments to create many OutgoingStocks.
     * @example
     * // Create many OutgoingStocks
     * const outgoingStock = await prisma.outgoingStock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OutgoingStockCreateManyArgs>(args?: SelectSubset<T, OutgoingStockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OutgoingStock.
     * @param {OutgoingStockDeleteArgs} args - Arguments to delete one OutgoingStock.
     * @example
     * // Delete one OutgoingStock
     * const OutgoingStock = await prisma.outgoingStock.delete({
     *   where: {
     *     // ... filter to delete one OutgoingStock
     *   }
     * })
     * 
     */
    delete<T extends OutgoingStockDeleteArgs>(args: SelectSubset<T, OutgoingStockDeleteArgs<ExtArgs>>): Prisma__OutgoingStockClient<$Result.GetResult<Prisma.$OutgoingStockPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OutgoingStock.
     * @param {OutgoingStockUpdateArgs} args - Arguments to update one OutgoingStock.
     * @example
     * // Update one OutgoingStock
     * const outgoingStock = await prisma.outgoingStock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OutgoingStockUpdateArgs>(args: SelectSubset<T, OutgoingStockUpdateArgs<ExtArgs>>): Prisma__OutgoingStockClient<$Result.GetResult<Prisma.$OutgoingStockPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OutgoingStocks.
     * @param {OutgoingStockDeleteManyArgs} args - Arguments to filter OutgoingStocks to delete.
     * @example
     * // Delete a few OutgoingStocks
     * const { count } = await prisma.outgoingStock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OutgoingStockDeleteManyArgs>(args?: SelectSubset<T, OutgoingStockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OutgoingStocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutgoingStockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OutgoingStocks
     * const outgoingStock = await prisma.outgoingStock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OutgoingStockUpdateManyArgs>(args: SelectSubset<T, OutgoingStockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OutgoingStock.
     * @param {OutgoingStockUpsertArgs} args - Arguments to update or create a OutgoingStock.
     * @example
     * // Update or create a OutgoingStock
     * const outgoingStock = await prisma.outgoingStock.upsert({
     *   create: {
     *     // ... data to create a OutgoingStock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OutgoingStock we want to update
     *   }
     * })
     */
    upsert<T extends OutgoingStockUpsertArgs>(args: SelectSubset<T, OutgoingStockUpsertArgs<ExtArgs>>): Prisma__OutgoingStockClient<$Result.GetResult<Prisma.$OutgoingStockPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OutgoingStocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutgoingStockCountArgs} args - Arguments to filter OutgoingStocks to count.
     * @example
     * // Count the number of OutgoingStocks
     * const count = await prisma.outgoingStock.count({
     *   where: {
     *     // ... the filter for the OutgoingStocks we want to count
     *   }
     * })
    **/
    count<T extends OutgoingStockCountArgs>(
      args?: Subset<T, OutgoingStockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OutgoingStockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OutgoingStock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutgoingStockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OutgoingStockAggregateArgs>(args: Subset<T, OutgoingStockAggregateArgs>): Prisma.PrismaPromise<GetOutgoingStockAggregateType<T>>

    /**
     * Group by OutgoingStock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutgoingStockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OutgoingStockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OutgoingStockGroupByArgs['orderBy'] }
        : { orderBy?: OutgoingStockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OutgoingStockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOutgoingStockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OutgoingStock model
   */
  readonly fields: OutgoingStockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OutgoingStock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OutgoingStockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends OutgoingStock$userArgs<ExtArgs> = {}>(args?: Subset<T, OutgoingStock$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    branch<T extends OutgoingStock$branchArgs<ExtArgs> = {}>(args?: Subset<T, OutgoingStock$branchArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OutgoingStock model
   */ 
  interface OutgoingStockFieldRefs {
    readonly id: FieldRef<"OutgoingStock", 'String'>
    readonly itemName: FieldRef<"OutgoingStock", 'String'>
    readonly categoryName: FieldRef<"OutgoingStock", 'String'>
    readonly userName: FieldRef<"OutgoingStock", 'String'>
    readonly branchName: FieldRef<"OutgoingStock", 'String'>
    readonly quantity: FieldRef<"OutgoingStock", 'Int'>
    readonly timeStamp: FieldRef<"OutgoingStock", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OutgoingStock findUnique
   */
  export type OutgoingStockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutgoingStock
     */
    select?: OutgoingStockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutgoingStockInclude<ExtArgs> | null
    /**
     * Filter, which OutgoingStock to fetch.
     */
    where: OutgoingStockWhereUniqueInput
  }

  /**
   * OutgoingStock findUniqueOrThrow
   */
  export type OutgoingStockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutgoingStock
     */
    select?: OutgoingStockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutgoingStockInclude<ExtArgs> | null
    /**
     * Filter, which OutgoingStock to fetch.
     */
    where: OutgoingStockWhereUniqueInput
  }

  /**
   * OutgoingStock findFirst
   */
  export type OutgoingStockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutgoingStock
     */
    select?: OutgoingStockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutgoingStockInclude<ExtArgs> | null
    /**
     * Filter, which OutgoingStock to fetch.
     */
    where?: OutgoingStockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OutgoingStocks to fetch.
     */
    orderBy?: OutgoingStockOrderByWithRelationInput | OutgoingStockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OutgoingStocks.
     */
    cursor?: OutgoingStockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OutgoingStocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OutgoingStocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OutgoingStocks.
     */
    distinct?: OutgoingStockScalarFieldEnum | OutgoingStockScalarFieldEnum[]
  }

  /**
   * OutgoingStock findFirstOrThrow
   */
  export type OutgoingStockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutgoingStock
     */
    select?: OutgoingStockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutgoingStockInclude<ExtArgs> | null
    /**
     * Filter, which OutgoingStock to fetch.
     */
    where?: OutgoingStockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OutgoingStocks to fetch.
     */
    orderBy?: OutgoingStockOrderByWithRelationInput | OutgoingStockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OutgoingStocks.
     */
    cursor?: OutgoingStockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OutgoingStocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OutgoingStocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OutgoingStocks.
     */
    distinct?: OutgoingStockScalarFieldEnum | OutgoingStockScalarFieldEnum[]
  }

  /**
   * OutgoingStock findMany
   */
  export type OutgoingStockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutgoingStock
     */
    select?: OutgoingStockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutgoingStockInclude<ExtArgs> | null
    /**
     * Filter, which OutgoingStocks to fetch.
     */
    where?: OutgoingStockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OutgoingStocks to fetch.
     */
    orderBy?: OutgoingStockOrderByWithRelationInput | OutgoingStockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OutgoingStocks.
     */
    cursor?: OutgoingStockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OutgoingStocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OutgoingStocks.
     */
    skip?: number
    distinct?: OutgoingStockScalarFieldEnum | OutgoingStockScalarFieldEnum[]
  }

  /**
   * OutgoingStock create
   */
  export type OutgoingStockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutgoingStock
     */
    select?: OutgoingStockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutgoingStockInclude<ExtArgs> | null
    /**
     * The data needed to create a OutgoingStock.
     */
    data: XOR<OutgoingStockCreateInput, OutgoingStockUncheckedCreateInput>
  }

  /**
   * OutgoingStock createMany
   */
  export type OutgoingStockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OutgoingStocks.
     */
    data: OutgoingStockCreateManyInput | OutgoingStockCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OutgoingStock update
   */
  export type OutgoingStockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutgoingStock
     */
    select?: OutgoingStockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutgoingStockInclude<ExtArgs> | null
    /**
     * The data needed to update a OutgoingStock.
     */
    data: XOR<OutgoingStockUpdateInput, OutgoingStockUncheckedUpdateInput>
    /**
     * Choose, which OutgoingStock to update.
     */
    where: OutgoingStockWhereUniqueInput
  }

  /**
   * OutgoingStock updateMany
   */
  export type OutgoingStockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OutgoingStocks.
     */
    data: XOR<OutgoingStockUpdateManyMutationInput, OutgoingStockUncheckedUpdateManyInput>
    /**
     * Filter which OutgoingStocks to update
     */
    where?: OutgoingStockWhereInput
  }

  /**
   * OutgoingStock upsert
   */
  export type OutgoingStockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutgoingStock
     */
    select?: OutgoingStockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutgoingStockInclude<ExtArgs> | null
    /**
     * The filter to search for the OutgoingStock to update in case it exists.
     */
    where: OutgoingStockWhereUniqueInput
    /**
     * In case the OutgoingStock found by the `where` argument doesn't exist, create a new OutgoingStock with this data.
     */
    create: XOR<OutgoingStockCreateInput, OutgoingStockUncheckedCreateInput>
    /**
     * In case the OutgoingStock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OutgoingStockUpdateInput, OutgoingStockUncheckedUpdateInput>
  }

  /**
   * OutgoingStock delete
   */
  export type OutgoingStockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutgoingStock
     */
    select?: OutgoingStockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutgoingStockInclude<ExtArgs> | null
    /**
     * Filter which OutgoingStock to delete.
     */
    where: OutgoingStockWhereUniqueInput
  }

  /**
   * OutgoingStock deleteMany
   */
  export type OutgoingStockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OutgoingStocks to delete
     */
    where?: OutgoingStockWhereInput
  }

  /**
   * OutgoingStock.user
   */
  export type OutgoingStock$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * OutgoingStock.branch
   */
  export type OutgoingStock$branchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    where?: BranchWhereInput
  }

  /**
   * OutgoingStock without action
   */
  export type OutgoingStockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutgoingStock
     */
    select?: OutgoingStockSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutgoingStockInclude<ExtArgs> | null
  }


  /**
   * Model Remark
   */

  export type AggregateRemark = {
    _count: RemarkCountAggregateOutputType | null
    _min: RemarkMinAggregateOutputType | null
    _max: RemarkMaxAggregateOutputType | null
  }

  export type RemarkMinAggregateOutputType = {
    id: string | null
    timeStamp: Date | null
    message: string | null
  }

  export type RemarkMaxAggregateOutputType = {
    id: string | null
    timeStamp: Date | null
    message: string | null
  }

  export type RemarkCountAggregateOutputType = {
    id: number
    timeStamp: number
    message: number
    _all: number
  }


  export type RemarkMinAggregateInputType = {
    id?: true
    timeStamp?: true
    message?: true
  }

  export type RemarkMaxAggregateInputType = {
    id?: true
    timeStamp?: true
    message?: true
  }

  export type RemarkCountAggregateInputType = {
    id?: true
    timeStamp?: true
    message?: true
    _all?: true
  }

  export type RemarkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Remark to aggregate.
     */
    where?: RemarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Remarks to fetch.
     */
    orderBy?: RemarkOrderByWithRelationInput | RemarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RemarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Remarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Remarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Remarks
    **/
    _count?: true | RemarkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RemarkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RemarkMaxAggregateInputType
  }

  export type GetRemarkAggregateType<T extends RemarkAggregateArgs> = {
        [P in keyof T & keyof AggregateRemark]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRemark[P]>
      : GetScalarType<T[P], AggregateRemark[P]>
  }




  export type RemarkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RemarkWhereInput
    orderBy?: RemarkOrderByWithAggregationInput | RemarkOrderByWithAggregationInput[]
    by: RemarkScalarFieldEnum[] | RemarkScalarFieldEnum
    having?: RemarkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RemarkCountAggregateInputType | true
    _min?: RemarkMinAggregateInputType
    _max?: RemarkMaxAggregateInputType
  }

  export type RemarkGroupByOutputType = {
    id: string
    timeStamp: Date
    message: string
    _count: RemarkCountAggregateOutputType | null
    _min: RemarkMinAggregateOutputType | null
    _max: RemarkMaxAggregateOutputType | null
  }

  type GetRemarkGroupByPayload<T extends RemarkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RemarkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RemarkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RemarkGroupByOutputType[P]>
            : GetScalarType<T[P], RemarkGroupByOutputType[P]>
        }
      >
    >


  export type RemarkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timeStamp?: boolean
    message?: boolean
  }, ExtArgs["result"]["remark"]>


  export type RemarkSelectScalar = {
    id?: boolean
    timeStamp?: boolean
    message?: boolean
  }


  export type $RemarkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Remark"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      timeStamp: Date
      message: string
    }, ExtArgs["result"]["remark"]>
    composites: {}
  }

  type RemarkGetPayload<S extends boolean | null | undefined | RemarkDefaultArgs> = $Result.GetResult<Prisma.$RemarkPayload, S>

  type RemarkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RemarkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RemarkCountAggregateInputType | true
    }

  export interface RemarkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Remark'], meta: { name: 'Remark' } }
    /**
     * Find zero or one Remark that matches the filter.
     * @param {RemarkFindUniqueArgs} args - Arguments to find a Remark
     * @example
     * // Get one Remark
     * const remark = await prisma.remark.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RemarkFindUniqueArgs>(args: SelectSubset<T, RemarkFindUniqueArgs<ExtArgs>>): Prisma__RemarkClient<$Result.GetResult<Prisma.$RemarkPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Remark that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RemarkFindUniqueOrThrowArgs} args - Arguments to find a Remark
     * @example
     * // Get one Remark
     * const remark = await prisma.remark.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RemarkFindUniqueOrThrowArgs>(args: SelectSubset<T, RemarkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RemarkClient<$Result.GetResult<Prisma.$RemarkPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Remark that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RemarkFindFirstArgs} args - Arguments to find a Remark
     * @example
     * // Get one Remark
     * const remark = await prisma.remark.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RemarkFindFirstArgs>(args?: SelectSubset<T, RemarkFindFirstArgs<ExtArgs>>): Prisma__RemarkClient<$Result.GetResult<Prisma.$RemarkPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Remark that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RemarkFindFirstOrThrowArgs} args - Arguments to find a Remark
     * @example
     * // Get one Remark
     * const remark = await prisma.remark.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RemarkFindFirstOrThrowArgs>(args?: SelectSubset<T, RemarkFindFirstOrThrowArgs<ExtArgs>>): Prisma__RemarkClient<$Result.GetResult<Prisma.$RemarkPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Remarks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RemarkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Remarks
     * const remarks = await prisma.remark.findMany()
     * 
     * // Get first 10 Remarks
     * const remarks = await prisma.remark.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const remarkWithIdOnly = await prisma.remark.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RemarkFindManyArgs>(args?: SelectSubset<T, RemarkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RemarkPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Remark.
     * @param {RemarkCreateArgs} args - Arguments to create a Remark.
     * @example
     * // Create one Remark
     * const Remark = await prisma.remark.create({
     *   data: {
     *     // ... data to create a Remark
     *   }
     * })
     * 
     */
    create<T extends RemarkCreateArgs>(args: SelectSubset<T, RemarkCreateArgs<ExtArgs>>): Prisma__RemarkClient<$Result.GetResult<Prisma.$RemarkPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Remarks.
     * @param {RemarkCreateManyArgs} args - Arguments to create many Remarks.
     * @example
     * // Create many Remarks
     * const remark = await prisma.remark.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RemarkCreateManyArgs>(args?: SelectSubset<T, RemarkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Remark.
     * @param {RemarkDeleteArgs} args - Arguments to delete one Remark.
     * @example
     * // Delete one Remark
     * const Remark = await prisma.remark.delete({
     *   where: {
     *     // ... filter to delete one Remark
     *   }
     * })
     * 
     */
    delete<T extends RemarkDeleteArgs>(args: SelectSubset<T, RemarkDeleteArgs<ExtArgs>>): Prisma__RemarkClient<$Result.GetResult<Prisma.$RemarkPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Remark.
     * @param {RemarkUpdateArgs} args - Arguments to update one Remark.
     * @example
     * // Update one Remark
     * const remark = await prisma.remark.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RemarkUpdateArgs>(args: SelectSubset<T, RemarkUpdateArgs<ExtArgs>>): Prisma__RemarkClient<$Result.GetResult<Prisma.$RemarkPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Remarks.
     * @param {RemarkDeleteManyArgs} args - Arguments to filter Remarks to delete.
     * @example
     * // Delete a few Remarks
     * const { count } = await prisma.remark.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RemarkDeleteManyArgs>(args?: SelectSubset<T, RemarkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Remarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RemarkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Remarks
     * const remark = await prisma.remark.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RemarkUpdateManyArgs>(args: SelectSubset<T, RemarkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Remark.
     * @param {RemarkUpsertArgs} args - Arguments to update or create a Remark.
     * @example
     * // Update or create a Remark
     * const remark = await prisma.remark.upsert({
     *   create: {
     *     // ... data to create a Remark
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Remark we want to update
     *   }
     * })
     */
    upsert<T extends RemarkUpsertArgs>(args: SelectSubset<T, RemarkUpsertArgs<ExtArgs>>): Prisma__RemarkClient<$Result.GetResult<Prisma.$RemarkPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Remarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RemarkCountArgs} args - Arguments to filter Remarks to count.
     * @example
     * // Count the number of Remarks
     * const count = await prisma.remark.count({
     *   where: {
     *     // ... the filter for the Remarks we want to count
     *   }
     * })
    **/
    count<T extends RemarkCountArgs>(
      args?: Subset<T, RemarkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RemarkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Remark.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RemarkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RemarkAggregateArgs>(args: Subset<T, RemarkAggregateArgs>): Prisma.PrismaPromise<GetRemarkAggregateType<T>>

    /**
     * Group by Remark.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RemarkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RemarkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RemarkGroupByArgs['orderBy'] }
        : { orderBy?: RemarkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RemarkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRemarkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Remark model
   */
  readonly fields: RemarkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Remark.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RemarkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Remark model
   */ 
  interface RemarkFieldRefs {
    readonly id: FieldRef<"Remark", 'String'>
    readonly timeStamp: FieldRef<"Remark", 'DateTime'>
    readonly message: FieldRef<"Remark", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Remark findUnique
   */
  export type RemarkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Remark
     */
    select?: RemarkSelect<ExtArgs> | null
    /**
     * Filter, which Remark to fetch.
     */
    where: RemarkWhereUniqueInput
  }

  /**
   * Remark findUniqueOrThrow
   */
  export type RemarkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Remark
     */
    select?: RemarkSelect<ExtArgs> | null
    /**
     * Filter, which Remark to fetch.
     */
    where: RemarkWhereUniqueInput
  }

  /**
   * Remark findFirst
   */
  export type RemarkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Remark
     */
    select?: RemarkSelect<ExtArgs> | null
    /**
     * Filter, which Remark to fetch.
     */
    where?: RemarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Remarks to fetch.
     */
    orderBy?: RemarkOrderByWithRelationInput | RemarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Remarks.
     */
    cursor?: RemarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Remarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Remarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Remarks.
     */
    distinct?: RemarkScalarFieldEnum | RemarkScalarFieldEnum[]
  }

  /**
   * Remark findFirstOrThrow
   */
  export type RemarkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Remark
     */
    select?: RemarkSelect<ExtArgs> | null
    /**
     * Filter, which Remark to fetch.
     */
    where?: RemarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Remarks to fetch.
     */
    orderBy?: RemarkOrderByWithRelationInput | RemarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Remarks.
     */
    cursor?: RemarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Remarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Remarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Remarks.
     */
    distinct?: RemarkScalarFieldEnum | RemarkScalarFieldEnum[]
  }

  /**
   * Remark findMany
   */
  export type RemarkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Remark
     */
    select?: RemarkSelect<ExtArgs> | null
    /**
     * Filter, which Remarks to fetch.
     */
    where?: RemarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Remarks to fetch.
     */
    orderBy?: RemarkOrderByWithRelationInput | RemarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Remarks.
     */
    cursor?: RemarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Remarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Remarks.
     */
    skip?: number
    distinct?: RemarkScalarFieldEnum | RemarkScalarFieldEnum[]
  }

  /**
   * Remark create
   */
  export type RemarkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Remark
     */
    select?: RemarkSelect<ExtArgs> | null
    /**
     * The data needed to create a Remark.
     */
    data: XOR<RemarkCreateInput, RemarkUncheckedCreateInput>
  }

  /**
   * Remark createMany
   */
  export type RemarkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Remarks.
     */
    data: RemarkCreateManyInput | RemarkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Remark update
   */
  export type RemarkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Remark
     */
    select?: RemarkSelect<ExtArgs> | null
    /**
     * The data needed to update a Remark.
     */
    data: XOR<RemarkUpdateInput, RemarkUncheckedUpdateInput>
    /**
     * Choose, which Remark to update.
     */
    where: RemarkWhereUniqueInput
  }

  /**
   * Remark updateMany
   */
  export type RemarkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Remarks.
     */
    data: XOR<RemarkUpdateManyMutationInput, RemarkUncheckedUpdateManyInput>
    /**
     * Filter which Remarks to update
     */
    where?: RemarkWhereInput
  }

  /**
   * Remark upsert
   */
  export type RemarkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Remark
     */
    select?: RemarkSelect<ExtArgs> | null
    /**
     * The filter to search for the Remark to update in case it exists.
     */
    where: RemarkWhereUniqueInput
    /**
     * In case the Remark found by the `where` argument doesn't exist, create a new Remark with this data.
     */
    create: XOR<RemarkCreateInput, RemarkUncheckedCreateInput>
    /**
     * In case the Remark was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RemarkUpdateInput, RemarkUncheckedUpdateInput>
  }

  /**
   * Remark delete
   */
  export type RemarkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Remark
     */
    select?: RemarkSelect<ExtArgs> | null
    /**
     * Filter which Remark to delete.
     */
    where: RemarkWhereUniqueInput
  }

  /**
   * Remark deleteMany
   */
  export type RemarkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Remarks to delete
     */
    where?: RemarkWhereInput
  }

  /**
   * Remark without action
   */
  export type RemarkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Remark
     */
    select?: RemarkSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    name: 'name',
    id: 'id',
    password: 'password',
    accessControl: 'accessControl',
    email: 'email'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BranchScalarFieldEnum: {
    name: 'name',
    id: 'id'
  };

  export type BranchScalarFieldEnum = (typeof BranchScalarFieldEnum)[keyof typeof BranchScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    name: 'name',
    id: 'id',
    percentage: 'percentage'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const InventoryScalarFieldEnum: {
    name: 'name',
    id: 'id',
    categoryName: 'categoryName',
    inventoryQuantity: 'inventoryQuantity',
    incomingTimeStamp: 'incomingTimeStamp',
    recentEntry: 'recentEntry',
    recentEntryAt: 'recentEntryAt'
  };

  export type InventoryScalarFieldEnum = (typeof InventoryScalarFieldEnum)[keyof typeof InventoryScalarFieldEnum]


  export const PaymentMethodScalarFieldEnum: {
    name: 'name',
    paymentId: 'paymentId',
    totalWeekly: 'totalWeekly'
  };

  export type PaymentMethodScalarFieldEnum = (typeof PaymentMethodScalarFieldEnum)[keyof typeof PaymentMethodScalarFieldEnum]


  export const SaleWeeklyScalarFieldEnum: {
    id: 'id',
    itemName: 'itemName',
    category: 'category',
    quantity: 'quantity',
    price: 'price',
    userName: 'userName',
    timeStamp: 'timeStamp',
    paymentMethod: 'paymentMethod'
  };

  export type SaleWeeklyScalarFieldEnum = (typeof SaleWeeklyScalarFieldEnum)[keyof typeof SaleWeeklyScalarFieldEnum]


  export const OutgoingStockScalarFieldEnum: {
    id: 'id',
    itemName: 'itemName',
    categoryName: 'categoryName',
    userName: 'userName',
    branchName: 'branchName',
    quantity: 'quantity',
    timeStamp: 'timeStamp'
  };

  export type OutgoingStockScalarFieldEnum = (typeof OutgoingStockScalarFieldEnum)[keyof typeof OutgoingStockScalarFieldEnum]


  export const RemarkScalarFieldEnum: {
    id: 'id',
    timeStamp: 'timeStamp',
    message: 'message'
  };

  export type RemarkScalarFieldEnum = (typeof RemarkScalarFieldEnum)[keyof typeof RemarkScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    id?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    accessControl?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    salesWeekly?: SaleWeeklyListRelationFilter
    outgoingStock?: OutgoingStockListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    name?: SortOrder
    id?: SortOrder
    password?: SortOrderInput | SortOrder
    accessControl?: SortOrderInput | SortOrder
    email?: SortOrder
    salesWeekly?: SaleWeeklyOrderByRelationAggregateInput
    outgoingStock?: OutgoingStockOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    password?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    accessControl?: StringNullableFilter<"User"> | string | null
    salesWeekly?: SaleWeeklyListRelationFilter
    outgoingStock?: OutgoingStockListRelationFilter
  }, "name" | "password" | "email">

  export type UserOrderByWithAggregationInput = {
    name?: SortOrder
    id?: SortOrder
    password?: SortOrderInput | SortOrder
    accessControl?: SortOrderInput | SortOrder
    email?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"User"> | string
    id?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    accessControl?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
  }

  export type BranchWhereInput = {
    AND?: BranchWhereInput | BranchWhereInput[]
    OR?: BranchWhereInput[]
    NOT?: BranchWhereInput | BranchWhereInput[]
    name?: StringFilter<"Branch"> | string
    id?: StringFilter<"Branch"> | string
    outgoingStock?: OutgoingStockListRelationFilter
  }

  export type BranchOrderByWithRelationInput = {
    name?: SortOrder
    id?: SortOrder
    outgoingStock?: OutgoingStockOrderByRelationAggregateInput
  }

  export type BranchWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: BranchWhereInput | BranchWhereInput[]
    OR?: BranchWhereInput[]
    NOT?: BranchWhereInput | BranchWhereInput[]
    id?: StringFilter<"Branch"> | string
    outgoingStock?: OutgoingStockListRelationFilter
  }, "name">

  export type BranchOrderByWithAggregationInput = {
    name?: SortOrder
    id?: SortOrder
    _count?: BranchCountOrderByAggregateInput
    _max?: BranchMaxOrderByAggregateInput
    _min?: BranchMinOrderByAggregateInput
  }

  export type BranchScalarWhereWithAggregatesInput = {
    AND?: BranchScalarWhereWithAggregatesInput | BranchScalarWhereWithAggregatesInput[]
    OR?: BranchScalarWhereWithAggregatesInput[]
    NOT?: BranchScalarWhereWithAggregatesInput | BranchScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Branch"> | string
    id?: StringWithAggregatesFilter<"Branch"> | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    id?: StringFilter<"Category"> | string
    percentage?: StringNullableFilter<"Category"> | string | null
    inventory?: InventoryListRelationFilter
    outgoingStock?: OutgoingStockListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    name?: SortOrder
    id?: SortOrder
    percentage?: SortOrderInput | SortOrder
    inventory?: InventoryOrderByRelationAggregateInput
    outgoingStock?: OutgoingStockOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    percentage?: StringNullableFilter<"Category"> | string | null
    inventory?: InventoryListRelationFilter
    outgoingStock?: OutgoingStockListRelationFilter
  }, "name">

  export type CategoryOrderByWithAggregationInput = {
    name?: SortOrder
    id?: SortOrder
    percentage?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Category"> | string
    id?: StringWithAggregatesFilter<"Category"> | string
    percentage?: StringNullableWithAggregatesFilter<"Category"> | string | null
  }

  export type InventoryWhereInput = {
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    name?: StringFilter<"Inventory"> | string
    id?: StringFilter<"Inventory"> | string
    categoryName?: StringFilter<"Inventory"> | string
    inventoryQuantity?: IntFilter<"Inventory"> | number
    incomingTimeStamp?: DateTimeNullableFilter<"Inventory"> | Date | string | null
    recentEntry?: IntFilter<"Inventory"> | number
    recentEntryAt?: DateTimeNullableFilter<"Inventory"> | Date | string | null
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    salesWeekly?: SaleWeeklyListRelationFilter
    outgoingStock?: OutgoingStockListRelationFilter
  }

  export type InventoryOrderByWithRelationInput = {
    name?: SortOrder
    id?: SortOrder
    categoryName?: SortOrder
    inventoryQuantity?: SortOrder
    incomingTimeStamp?: SortOrderInput | SortOrder
    recentEntry?: SortOrder
    recentEntryAt?: SortOrderInput | SortOrder
    category?: CategoryOrderByWithRelationInput
    salesWeekly?: SaleWeeklyOrderByRelationAggregateInput
    outgoingStock?: OutgoingStockOrderByRelationAggregateInput
  }

  export type InventoryWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    id?: StringFilter<"Inventory"> | string
    categoryName?: StringFilter<"Inventory"> | string
    inventoryQuantity?: IntFilter<"Inventory"> | number
    incomingTimeStamp?: DateTimeNullableFilter<"Inventory"> | Date | string | null
    recentEntry?: IntFilter<"Inventory"> | number
    recentEntryAt?: DateTimeNullableFilter<"Inventory"> | Date | string | null
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    salesWeekly?: SaleWeeklyListRelationFilter
    outgoingStock?: OutgoingStockListRelationFilter
  }, "name">

  export type InventoryOrderByWithAggregationInput = {
    name?: SortOrder
    id?: SortOrder
    categoryName?: SortOrder
    inventoryQuantity?: SortOrder
    incomingTimeStamp?: SortOrderInput | SortOrder
    recentEntry?: SortOrder
    recentEntryAt?: SortOrderInput | SortOrder
    _count?: InventoryCountOrderByAggregateInput
    _avg?: InventoryAvgOrderByAggregateInput
    _max?: InventoryMaxOrderByAggregateInput
    _min?: InventoryMinOrderByAggregateInput
    _sum?: InventorySumOrderByAggregateInput
  }

  export type InventoryScalarWhereWithAggregatesInput = {
    AND?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    OR?: InventoryScalarWhereWithAggregatesInput[]
    NOT?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Inventory"> | string
    id?: StringWithAggregatesFilter<"Inventory"> | string
    categoryName?: StringWithAggregatesFilter<"Inventory"> | string
    inventoryQuantity?: IntWithAggregatesFilter<"Inventory"> | number
    incomingTimeStamp?: DateTimeNullableWithAggregatesFilter<"Inventory"> | Date | string | null
    recentEntry?: IntWithAggregatesFilter<"Inventory"> | number
    recentEntryAt?: DateTimeNullableWithAggregatesFilter<"Inventory"> | Date | string | null
  }

  export type PaymentMethodWhereInput = {
    AND?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    OR?: PaymentMethodWhereInput[]
    NOT?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    name?: StringFilter<"PaymentMethod"> | string
    paymentId?: StringNullableFilter<"PaymentMethod"> | string | null
    totalWeekly?: IntFilter<"PaymentMethod"> | number
    salesWeekly?: SaleWeeklyListRelationFilter
  }

  export type PaymentMethodOrderByWithRelationInput = {
    name?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    totalWeekly?: SortOrder
    salesWeekly?: SaleWeeklyOrderByRelationAggregateInput
  }

  export type PaymentMethodWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    OR?: PaymentMethodWhereInput[]
    NOT?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    paymentId?: StringNullableFilter<"PaymentMethod"> | string | null
    totalWeekly?: IntFilter<"PaymentMethod"> | number
    salesWeekly?: SaleWeeklyListRelationFilter
  }, "name">

  export type PaymentMethodOrderByWithAggregationInput = {
    name?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    totalWeekly?: SortOrder
    _count?: PaymentMethodCountOrderByAggregateInput
    _avg?: PaymentMethodAvgOrderByAggregateInput
    _max?: PaymentMethodMaxOrderByAggregateInput
    _min?: PaymentMethodMinOrderByAggregateInput
    _sum?: PaymentMethodSumOrderByAggregateInput
  }

  export type PaymentMethodScalarWhereWithAggregatesInput = {
    AND?: PaymentMethodScalarWhereWithAggregatesInput | PaymentMethodScalarWhereWithAggregatesInput[]
    OR?: PaymentMethodScalarWhereWithAggregatesInput[]
    NOT?: PaymentMethodScalarWhereWithAggregatesInput | PaymentMethodScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"PaymentMethod"> | string
    paymentId?: StringNullableWithAggregatesFilter<"PaymentMethod"> | string | null
    totalWeekly?: IntWithAggregatesFilter<"PaymentMethod"> | number
  }

  export type SaleWeeklyWhereInput = {
    AND?: SaleWeeklyWhereInput | SaleWeeklyWhereInput[]
    OR?: SaleWeeklyWhereInput[]
    NOT?: SaleWeeklyWhereInput | SaleWeeklyWhereInput[]
    id?: StringFilter<"SaleWeekly"> | string
    itemName?: StringNullableFilter<"SaleWeekly"> | string | null
    category?: StringNullableFilter<"SaleWeekly"> | string | null
    quantity?: IntFilter<"SaleWeekly"> | number
    price?: IntFilter<"SaleWeekly"> | number
    userName?: StringNullableFilter<"SaleWeekly"> | string | null
    timeStamp?: DateTimeNullableFilter<"SaleWeekly"> | Date | string | null
    paymentMethod?: StringNullableFilter<"SaleWeekly"> | string | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    item?: XOR<InventoryNullableRelationFilter, InventoryWhereInput> | null
    payment?: XOR<PaymentMethodNullableRelationFilter, PaymentMethodWhereInput> | null
  }

  export type SaleWeeklyOrderByWithRelationInput = {
    id?: SortOrder
    itemName?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    quantity?: SortOrder
    price?: SortOrder
    userName?: SortOrderInput | SortOrder
    timeStamp?: SortOrderInput | SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    item?: InventoryOrderByWithRelationInput
    payment?: PaymentMethodOrderByWithRelationInput
  }

  export type SaleWeeklyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SaleWeeklyWhereInput | SaleWeeklyWhereInput[]
    OR?: SaleWeeklyWhereInput[]
    NOT?: SaleWeeklyWhereInput | SaleWeeklyWhereInput[]
    itemName?: StringNullableFilter<"SaleWeekly"> | string | null
    category?: StringNullableFilter<"SaleWeekly"> | string | null
    quantity?: IntFilter<"SaleWeekly"> | number
    price?: IntFilter<"SaleWeekly"> | number
    userName?: StringNullableFilter<"SaleWeekly"> | string | null
    timeStamp?: DateTimeNullableFilter<"SaleWeekly"> | Date | string | null
    paymentMethod?: StringNullableFilter<"SaleWeekly"> | string | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    item?: XOR<InventoryNullableRelationFilter, InventoryWhereInput> | null
    payment?: XOR<PaymentMethodNullableRelationFilter, PaymentMethodWhereInput> | null
  }, "id">

  export type SaleWeeklyOrderByWithAggregationInput = {
    id?: SortOrder
    itemName?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    quantity?: SortOrder
    price?: SortOrder
    userName?: SortOrderInput | SortOrder
    timeStamp?: SortOrderInput | SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    _count?: SaleWeeklyCountOrderByAggregateInput
    _avg?: SaleWeeklyAvgOrderByAggregateInput
    _max?: SaleWeeklyMaxOrderByAggregateInput
    _min?: SaleWeeklyMinOrderByAggregateInput
    _sum?: SaleWeeklySumOrderByAggregateInput
  }

  export type SaleWeeklyScalarWhereWithAggregatesInput = {
    AND?: SaleWeeklyScalarWhereWithAggregatesInput | SaleWeeklyScalarWhereWithAggregatesInput[]
    OR?: SaleWeeklyScalarWhereWithAggregatesInput[]
    NOT?: SaleWeeklyScalarWhereWithAggregatesInput | SaleWeeklyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SaleWeekly"> | string
    itemName?: StringNullableWithAggregatesFilter<"SaleWeekly"> | string | null
    category?: StringNullableWithAggregatesFilter<"SaleWeekly"> | string | null
    quantity?: IntWithAggregatesFilter<"SaleWeekly"> | number
    price?: IntWithAggregatesFilter<"SaleWeekly"> | number
    userName?: StringNullableWithAggregatesFilter<"SaleWeekly"> | string | null
    timeStamp?: DateTimeNullableWithAggregatesFilter<"SaleWeekly"> | Date | string | null
    paymentMethod?: StringNullableWithAggregatesFilter<"SaleWeekly"> | string | null
  }

  export type OutgoingStockWhereInput = {
    AND?: OutgoingStockWhereInput | OutgoingStockWhereInput[]
    OR?: OutgoingStockWhereInput[]
    NOT?: OutgoingStockWhereInput | OutgoingStockWhereInput[]
    id?: StringFilter<"OutgoingStock"> | string
    itemName?: StringFilter<"OutgoingStock"> | string
    categoryName?: StringFilter<"OutgoingStock"> | string
    userName?: StringNullableFilter<"OutgoingStock"> | string | null
    branchName?: StringNullableFilter<"OutgoingStock"> | string | null
    quantity?: IntFilter<"OutgoingStock"> | number
    timeStamp?: DateTimeNullableFilter<"OutgoingStock"> | Date | string | null
    item?: XOR<InventoryRelationFilter, InventoryWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    branch?: XOR<BranchNullableRelationFilter, BranchWhereInput> | null
  }

  export type OutgoingStockOrderByWithRelationInput = {
    id?: SortOrder
    itemName?: SortOrder
    categoryName?: SortOrder
    userName?: SortOrderInput | SortOrder
    branchName?: SortOrderInput | SortOrder
    quantity?: SortOrder
    timeStamp?: SortOrderInput | SortOrder
    item?: InventoryOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    branch?: BranchOrderByWithRelationInput
  }

  export type OutgoingStockWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OutgoingStockWhereInput | OutgoingStockWhereInput[]
    OR?: OutgoingStockWhereInput[]
    NOT?: OutgoingStockWhereInput | OutgoingStockWhereInput[]
    itemName?: StringFilter<"OutgoingStock"> | string
    categoryName?: StringFilter<"OutgoingStock"> | string
    userName?: StringNullableFilter<"OutgoingStock"> | string | null
    branchName?: StringNullableFilter<"OutgoingStock"> | string | null
    quantity?: IntFilter<"OutgoingStock"> | number
    timeStamp?: DateTimeNullableFilter<"OutgoingStock"> | Date | string | null
    item?: XOR<InventoryRelationFilter, InventoryWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    branch?: XOR<BranchNullableRelationFilter, BranchWhereInput> | null
  }, "id">

  export type OutgoingStockOrderByWithAggregationInput = {
    id?: SortOrder
    itemName?: SortOrder
    categoryName?: SortOrder
    userName?: SortOrderInput | SortOrder
    branchName?: SortOrderInput | SortOrder
    quantity?: SortOrder
    timeStamp?: SortOrderInput | SortOrder
    _count?: OutgoingStockCountOrderByAggregateInput
    _avg?: OutgoingStockAvgOrderByAggregateInput
    _max?: OutgoingStockMaxOrderByAggregateInput
    _min?: OutgoingStockMinOrderByAggregateInput
    _sum?: OutgoingStockSumOrderByAggregateInput
  }

  export type OutgoingStockScalarWhereWithAggregatesInput = {
    AND?: OutgoingStockScalarWhereWithAggregatesInput | OutgoingStockScalarWhereWithAggregatesInput[]
    OR?: OutgoingStockScalarWhereWithAggregatesInput[]
    NOT?: OutgoingStockScalarWhereWithAggregatesInput | OutgoingStockScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OutgoingStock"> | string
    itemName?: StringWithAggregatesFilter<"OutgoingStock"> | string
    categoryName?: StringWithAggregatesFilter<"OutgoingStock"> | string
    userName?: StringNullableWithAggregatesFilter<"OutgoingStock"> | string | null
    branchName?: StringNullableWithAggregatesFilter<"OutgoingStock"> | string | null
    quantity?: IntWithAggregatesFilter<"OutgoingStock"> | number
    timeStamp?: DateTimeNullableWithAggregatesFilter<"OutgoingStock"> | Date | string | null
  }

  export type RemarkWhereInput = {
    AND?: RemarkWhereInput | RemarkWhereInput[]
    OR?: RemarkWhereInput[]
    NOT?: RemarkWhereInput | RemarkWhereInput[]
    id?: StringFilter<"Remark"> | string
    timeStamp?: DateTimeFilter<"Remark"> | Date | string
    message?: StringFilter<"Remark"> | string
  }

  export type RemarkOrderByWithRelationInput = {
    id?: SortOrder
    timeStamp?: SortOrder
    message?: SortOrder
  }

  export type RemarkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RemarkWhereInput | RemarkWhereInput[]
    OR?: RemarkWhereInput[]
    NOT?: RemarkWhereInput | RemarkWhereInput[]
    timeStamp?: DateTimeFilter<"Remark"> | Date | string
    message?: StringFilter<"Remark"> | string
  }, "id">

  export type RemarkOrderByWithAggregationInput = {
    id?: SortOrder
    timeStamp?: SortOrder
    message?: SortOrder
    _count?: RemarkCountOrderByAggregateInput
    _max?: RemarkMaxOrderByAggregateInput
    _min?: RemarkMinOrderByAggregateInput
  }

  export type RemarkScalarWhereWithAggregatesInput = {
    AND?: RemarkScalarWhereWithAggregatesInput | RemarkScalarWhereWithAggregatesInput[]
    OR?: RemarkScalarWhereWithAggregatesInput[]
    NOT?: RemarkScalarWhereWithAggregatesInput | RemarkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Remark"> | string
    timeStamp?: DateTimeWithAggregatesFilter<"Remark"> | Date | string
    message?: StringWithAggregatesFilter<"Remark"> | string
  }

  export type UserCreateInput = {
    name: string
    id: string
    password?: string | null
    accessControl?: string | null
    email: string
    salesWeekly?: SaleWeeklyCreateNestedManyWithoutUserInput
    outgoingStock?: OutgoingStockCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    name: string
    id: string
    password?: string | null
    accessControl?: string | null
    email: string
    salesWeekly?: SaleWeeklyUncheckedCreateNestedManyWithoutUserInput
    outgoingStock?: OutgoingStockUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessControl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    salesWeekly?: SaleWeeklyUpdateManyWithoutUserNestedInput
    outgoingStock?: OutgoingStockUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessControl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    salesWeekly?: SaleWeeklyUncheckedUpdateManyWithoutUserNestedInput
    outgoingStock?: OutgoingStockUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    name: string
    id: string
    password?: string | null
    accessControl?: string | null
    email: string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessControl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessControl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
  }

  export type BranchCreateInput = {
    name: string
    id: string
    outgoingStock?: OutgoingStockCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateInput = {
    name: string
    id: string
    outgoingStock?: OutgoingStockUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    outgoingStock?: OutgoingStockUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    outgoingStock?: OutgoingStockUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type BranchCreateManyInput = {
    name: string
    id: string
  }

  export type BranchUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type BranchUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    name: string
    id: string
    percentage?: string | null
    inventory?: InventoryCreateNestedManyWithoutCategoryInput
    outgoingStock?: OutgoingStockCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    name: string
    id: string
    percentage?: string | null
    inventory?: InventoryUncheckedCreateNestedManyWithoutCategoryInput
    outgoingStock?: OutgoingStockUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    percentage?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUpdateManyWithoutCategoryNestedInput
    outgoingStock?: OutgoingStockUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    percentage?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUncheckedUpdateManyWithoutCategoryNestedInput
    outgoingStock?: OutgoingStockUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    name: string
    id: string
    percentage?: string | null
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    percentage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    percentage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryCreateInput = {
    name: string
    id: string
    inventoryQuantity?: number
    incomingTimeStamp?: Date | string | null
    recentEntry?: number
    recentEntryAt?: Date | string | null
    category: CategoryCreateNestedOneWithoutInventoryInput
    salesWeekly?: SaleWeeklyCreateNestedManyWithoutItemInput
    outgoingStock?: OutgoingStockCreateNestedManyWithoutItemInput
  }

  export type InventoryUncheckedCreateInput = {
    name: string
    id: string
    categoryName: string
    inventoryQuantity?: number
    incomingTimeStamp?: Date | string | null
    recentEntry?: number
    recentEntryAt?: Date | string | null
    salesWeekly?: SaleWeeklyUncheckedCreateNestedManyWithoutItemInput
    outgoingStock?: OutgoingStockUncheckedCreateNestedManyWithoutItemInput
  }

  export type InventoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    inventoryQuantity?: IntFieldUpdateOperationsInput | number
    incomingTimeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recentEntry?: IntFieldUpdateOperationsInput | number
    recentEntryAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneRequiredWithoutInventoryNestedInput
    salesWeekly?: SaleWeeklyUpdateManyWithoutItemNestedInput
    outgoingStock?: OutgoingStockUpdateManyWithoutItemNestedInput
  }

  export type InventoryUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    inventoryQuantity?: IntFieldUpdateOperationsInput | number
    incomingTimeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recentEntry?: IntFieldUpdateOperationsInput | number
    recentEntryAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salesWeekly?: SaleWeeklyUncheckedUpdateManyWithoutItemNestedInput
    outgoingStock?: OutgoingStockUncheckedUpdateManyWithoutItemNestedInput
  }

  export type InventoryCreateManyInput = {
    name: string
    id: string
    categoryName: string
    inventoryQuantity?: number
    incomingTimeStamp?: Date | string | null
    recentEntry?: number
    recentEntryAt?: Date | string | null
  }

  export type InventoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    inventoryQuantity?: IntFieldUpdateOperationsInput | number
    incomingTimeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recentEntry?: IntFieldUpdateOperationsInput | number
    recentEntryAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InventoryUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    inventoryQuantity?: IntFieldUpdateOperationsInput | number
    incomingTimeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recentEntry?: IntFieldUpdateOperationsInput | number
    recentEntryAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentMethodCreateInput = {
    name: string
    paymentId?: string | null
    totalWeekly?: number
    salesWeekly?: SaleWeeklyCreateNestedManyWithoutPaymentInput
  }

  export type PaymentMethodUncheckedCreateInput = {
    name: string
    paymentId?: string | null
    totalWeekly?: number
    salesWeekly?: SaleWeeklyUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentMethodUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    totalWeekly?: IntFieldUpdateOperationsInput | number
    salesWeekly?: SaleWeeklyUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentMethodUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    totalWeekly?: IntFieldUpdateOperationsInput | number
    salesWeekly?: SaleWeeklyUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentMethodCreateManyInput = {
    name: string
    paymentId?: string | null
    totalWeekly?: number
  }

  export type PaymentMethodUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    totalWeekly?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentMethodUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    totalWeekly?: IntFieldUpdateOperationsInput | number
  }

  export type SaleWeeklyCreateInput = {
    id: string
    category?: string | null
    quantity?: number
    price?: number
    timeStamp?: Date | string | null
    user?: UserCreateNestedOneWithoutSalesWeeklyInput
    item?: InventoryCreateNestedOneWithoutSalesWeeklyInput
    payment?: PaymentMethodCreateNestedOneWithoutSalesWeeklyInput
  }

  export type SaleWeeklyUncheckedCreateInput = {
    id: string
    itemName?: string | null
    category?: string | null
    quantity?: number
    price?: number
    userName?: string | null
    timeStamp?: Date | string | null
    paymentMethod?: string | null
  }

  export type SaleWeeklyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutSalesWeeklyNestedInput
    item?: InventoryUpdateOneWithoutSalesWeeklyNestedInput
    payment?: PaymentMethodUpdateOneWithoutSalesWeeklyNestedInput
  }

  export type SaleWeeklyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SaleWeeklyCreateManyInput = {
    id: string
    itemName?: string | null
    category?: string | null
    quantity?: number
    price?: number
    userName?: string | null
    timeStamp?: Date | string | null
    paymentMethod?: string | null
  }

  export type SaleWeeklyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SaleWeeklyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OutgoingStockCreateInput = {
    id: string
    quantity: number
    timeStamp?: Date | string | null
    item: InventoryCreateNestedOneWithoutOutgoingStockInput
    category: CategoryCreateNestedOneWithoutOutgoingStockInput
    user?: UserCreateNestedOneWithoutOutgoingStockInput
    branch?: BranchCreateNestedOneWithoutOutgoingStockInput
  }

  export type OutgoingStockUncheckedCreateInput = {
    id: string
    itemName: string
    categoryName: string
    userName?: string | null
    branchName?: string | null
    quantity: number
    timeStamp?: Date | string | null
  }

  export type OutgoingStockUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    item?: InventoryUpdateOneRequiredWithoutOutgoingStockNestedInput
    category?: CategoryUpdateOneRequiredWithoutOutgoingStockNestedInput
    user?: UserUpdateOneWithoutOutgoingStockNestedInput
    branch?: BranchUpdateOneWithoutOutgoingStockNestedInput
  }

  export type OutgoingStockUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OutgoingStockCreateManyInput = {
    id: string
    itemName: string
    categoryName: string
    userName?: string | null
    branchName?: string | null
    quantity: number
    timeStamp?: Date | string | null
  }

  export type OutgoingStockUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OutgoingStockUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RemarkCreateInput = {
    id: string
    timeStamp: Date | string
    message: string
  }

  export type RemarkUncheckedCreateInput = {
    id: string
    timeStamp: Date | string
    message: string
  }

  export type RemarkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type RemarkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type RemarkCreateManyInput = {
    id: string
    timeStamp: Date | string
    message: string
  }

  export type RemarkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type RemarkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    timeStamp?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SaleWeeklyListRelationFilter = {
    every?: SaleWeeklyWhereInput
    some?: SaleWeeklyWhereInput
    none?: SaleWeeklyWhereInput
  }

  export type OutgoingStockListRelationFilter = {
    every?: OutgoingStockWhereInput
    some?: OutgoingStockWhereInput
    none?: OutgoingStockWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SaleWeeklyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OutgoingStockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    password?: SortOrder
    accessControl?: SortOrder
    email?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    password?: SortOrder
    accessControl?: SortOrder
    email?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    password?: SortOrder
    accessControl?: SortOrder
    email?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BranchCountOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
  }

  export type BranchMaxOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
  }

  export type BranchMinOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
  }

  export type InventoryListRelationFilter = {
    every?: InventoryWhereInput
    some?: InventoryWhereInput
    none?: InventoryWhereInput
  }

  export type InventoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    percentage?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    percentage?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    percentage?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type InventoryCountOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    categoryName?: SortOrder
    inventoryQuantity?: SortOrder
    incomingTimeStamp?: SortOrder
    recentEntry?: SortOrder
    recentEntryAt?: SortOrder
  }

  export type InventoryAvgOrderByAggregateInput = {
    inventoryQuantity?: SortOrder
    recentEntry?: SortOrder
  }

  export type InventoryMaxOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    categoryName?: SortOrder
    inventoryQuantity?: SortOrder
    incomingTimeStamp?: SortOrder
    recentEntry?: SortOrder
    recentEntryAt?: SortOrder
  }

  export type InventoryMinOrderByAggregateInput = {
    name?: SortOrder
    id?: SortOrder
    categoryName?: SortOrder
    inventoryQuantity?: SortOrder
    incomingTimeStamp?: SortOrder
    recentEntry?: SortOrder
    recentEntryAt?: SortOrder
  }

  export type InventorySumOrderByAggregateInput = {
    inventoryQuantity?: SortOrder
    recentEntry?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type PaymentMethodCountOrderByAggregateInput = {
    name?: SortOrder
    paymentId?: SortOrder
    totalWeekly?: SortOrder
  }

  export type PaymentMethodAvgOrderByAggregateInput = {
    totalWeekly?: SortOrder
  }

  export type PaymentMethodMaxOrderByAggregateInput = {
    name?: SortOrder
    paymentId?: SortOrder
    totalWeekly?: SortOrder
  }

  export type PaymentMethodMinOrderByAggregateInput = {
    name?: SortOrder
    paymentId?: SortOrder
    totalWeekly?: SortOrder
  }

  export type PaymentMethodSumOrderByAggregateInput = {
    totalWeekly?: SortOrder
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type InventoryNullableRelationFilter = {
    is?: InventoryWhereInput | null
    isNot?: InventoryWhereInput | null
  }

  export type PaymentMethodNullableRelationFilter = {
    is?: PaymentMethodWhereInput | null
    isNot?: PaymentMethodWhereInput | null
  }

  export type SaleWeeklyCountOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    userName?: SortOrder
    timeStamp?: SortOrder
    paymentMethod?: SortOrder
  }

  export type SaleWeeklyAvgOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
  }

  export type SaleWeeklyMaxOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    userName?: SortOrder
    timeStamp?: SortOrder
    paymentMethod?: SortOrder
  }

  export type SaleWeeklyMinOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    userName?: SortOrder
    timeStamp?: SortOrder
    paymentMethod?: SortOrder
  }

  export type SaleWeeklySumOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
  }

  export type InventoryRelationFilter = {
    is?: InventoryWhereInput
    isNot?: InventoryWhereInput
  }

  export type BranchNullableRelationFilter = {
    is?: BranchWhereInput | null
    isNot?: BranchWhereInput | null
  }

  export type OutgoingStockCountOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    categoryName?: SortOrder
    userName?: SortOrder
    branchName?: SortOrder
    quantity?: SortOrder
    timeStamp?: SortOrder
  }

  export type OutgoingStockAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type OutgoingStockMaxOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    categoryName?: SortOrder
    userName?: SortOrder
    branchName?: SortOrder
    quantity?: SortOrder
    timeStamp?: SortOrder
  }

  export type OutgoingStockMinOrderByAggregateInput = {
    id?: SortOrder
    itemName?: SortOrder
    categoryName?: SortOrder
    userName?: SortOrder
    branchName?: SortOrder
    quantity?: SortOrder
    timeStamp?: SortOrder
  }

  export type OutgoingStockSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RemarkCountOrderByAggregateInput = {
    id?: SortOrder
    timeStamp?: SortOrder
    message?: SortOrder
  }

  export type RemarkMaxOrderByAggregateInput = {
    id?: SortOrder
    timeStamp?: SortOrder
    message?: SortOrder
  }

  export type RemarkMinOrderByAggregateInput = {
    id?: SortOrder
    timeStamp?: SortOrder
    message?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SaleWeeklyCreateNestedManyWithoutUserInput = {
    create?: XOR<SaleWeeklyCreateWithoutUserInput, SaleWeeklyUncheckedCreateWithoutUserInput> | SaleWeeklyCreateWithoutUserInput[] | SaleWeeklyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SaleWeeklyCreateOrConnectWithoutUserInput | SaleWeeklyCreateOrConnectWithoutUserInput[]
    createMany?: SaleWeeklyCreateManyUserInputEnvelope
    connect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
  }

  export type OutgoingStockCreateNestedManyWithoutUserInput = {
    create?: XOR<OutgoingStockCreateWithoutUserInput, OutgoingStockUncheckedCreateWithoutUserInput> | OutgoingStockCreateWithoutUserInput[] | OutgoingStockUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutUserInput | OutgoingStockCreateOrConnectWithoutUserInput[]
    createMany?: OutgoingStockCreateManyUserInputEnvelope
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
  }

  export type SaleWeeklyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SaleWeeklyCreateWithoutUserInput, SaleWeeklyUncheckedCreateWithoutUserInput> | SaleWeeklyCreateWithoutUserInput[] | SaleWeeklyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SaleWeeklyCreateOrConnectWithoutUserInput | SaleWeeklyCreateOrConnectWithoutUserInput[]
    createMany?: SaleWeeklyCreateManyUserInputEnvelope
    connect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
  }

  export type OutgoingStockUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OutgoingStockCreateWithoutUserInput, OutgoingStockUncheckedCreateWithoutUserInput> | OutgoingStockCreateWithoutUserInput[] | OutgoingStockUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutUserInput | OutgoingStockCreateOrConnectWithoutUserInput[]
    createMany?: OutgoingStockCreateManyUserInputEnvelope
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type SaleWeeklyUpdateManyWithoutUserNestedInput = {
    create?: XOR<SaleWeeklyCreateWithoutUserInput, SaleWeeklyUncheckedCreateWithoutUserInput> | SaleWeeklyCreateWithoutUserInput[] | SaleWeeklyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SaleWeeklyCreateOrConnectWithoutUserInput | SaleWeeklyCreateOrConnectWithoutUserInput[]
    upsert?: SaleWeeklyUpsertWithWhereUniqueWithoutUserInput | SaleWeeklyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SaleWeeklyCreateManyUserInputEnvelope
    set?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    disconnect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    delete?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    connect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    update?: SaleWeeklyUpdateWithWhereUniqueWithoutUserInput | SaleWeeklyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SaleWeeklyUpdateManyWithWhereWithoutUserInput | SaleWeeklyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SaleWeeklyScalarWhereInput | SaleWeeklyScalarWhereInput[]
  }

  export type OutgoingStockUpdateManyWithoutUserNestedInput = {
    create?: XOR<OutgoingStockCreateWithoutUserInput, OutgoingStockUncheckedCreateWithoutUserInput> | OutgoingStockCreateWithoutUserInput[] | OutgoingStockUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutUserInput | OutgoingStockCreateOrConnectWithoutUserInput[]
    upsert?: OutgoingStockUpsertWithWhereUniqueWithoutUserInput | OutgoingStockUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OutgoingStockCreateManyUserInputEnvelope
    set?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    disconnect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    delete?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    update?: OutgoingStockUpdateWithWhereUniqueWithoutUserInput | OutgoingStockUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OutgoingStockUpdateManyWithWhereWithoutUserInput | OutgoingStockUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OutgoingStockScalarWhereInput | OutgoingStockScalarWhereInput[]
  }

  export type SaleWeeklyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SaleWeeklyCreateWithoutUserInput, SaleWeeklyUncheckedCreateWithoutUserInput> | SaleWeeklyCreateWithoutUserInput[] | SaleWeeklyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SaleWeeklyCreateOrConnectWithoutUserInput | SaleWeeklyCreateOrConnectWithoutUserInput[]
    upsert?: SaleWeeklyUpsertWithWhereUniqueWithoutUserInput | SaleWeeklyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SaleWeeklyCreateManyUserInputEnvelope
    set?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    disconnect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    delete?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    connect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    update?: SaleWeeklyUpdateWithWhereUniqueWithoutUserInput | SaleWeeklyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SaleWeeklyUpdateManyWithWhereWithoutUserInput | SaleWeeklyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SaleWeeklyScalarWhereInput | SaleWeeklyScalarWhereInput[]
  }

  export type OutgoingStockUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OutgoingStockCreateWithoutUserInput, OutgoingStockUncheckedCreateWithoutUserInput> | OutgoingStockCreateWithoutUserInput[] | OutgoingStockUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutUserInput | OutgoingStockCreateOrConnectWithoutUserInput[]
    upsert?: OutgoingStockUpsertWithWhereUniqueWithoutUserInput | OutgoingStockUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OutgoingStockCreateManyUserInputEnvelope
    set?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    disconnect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    delete?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    update?: OutgoingStockUpdateWithWhereUniqueWithoutUserInput | OutgoingStockUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OutgoingStockUpdateManyWithWhereWithoutUserInput | OutgoingStockUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OutgoingStockScalarWhereInput | OutgoingStockScalarWhereInput[]
  }

  export type OutgoingStockCreateNestedManyWithoutBranchInput = {
    create?: XOR<OutgoingStockCreateWithoutBranchInput, OutgoingStockUncheckedCreateWithoutBranchInput> | OutgoingStockCreateWithoutBranchInput[] | OutgoingStockUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutBranchInput | OutgoingStockCreateOrConnectWithoutBranchInput[]
    createMany?: OutgoingStockCreateManyBranchInputEnvelope
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
  }

  export type OutgoingStockUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<OutgoingStockCreateWithoutBranchInput, OutgoingStockUncheckedCreateWithoutBranchInput> | OutgoingStockCreateWithoutBranchInput[] | OutgoingStockUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutBranchInput | OutgoingStockCreateOrConnectWithoutBranchInput[]
    createMany?: OutgoingStockCreateManyBranchInputEnvelope
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
  }

  export type OutgoingStockUpdateManyWithoutBranchNestedInput = {
    create?: XOR<OutgoingStockCreateWithoutBranchInput, OutgoingStockUncheckedCreateWithoutBranchInput> | OutgoingStockCreateWithoutBranchInput[] | OutgoingStockUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutBranchInput | OutgoingStockCreateOrConnectWithoutBranchInput[]
    upsert?: OutgoingStockUpsertWithWhereUniqueWithoutBranchInput | OutgoingStockUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: OutgoingStockCreateManyBranchInputEnvelope
    set?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    disconnect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    delete?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    update?: OutgoingStockUpdateWithWhereUniqueWithoutBranchInput | OutgoingStockUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: OutgoingStockUpdateManyWithWhereWithoutBranchInput | OutgoingStockUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: OutgoingStockScalarWhereInput | OutgoingStockScalarWhereInput[]
  }

  export type OutgoingStockUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<OutgoingStockCreateWithoutBranchInput, OutgoingStockUncheckedCreateWithoutBranchInput> | OutgoingStockCreateWithoutBranchInput[] | OutgoingStockUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutBranchInput | OutgoingStockCreateOrConnectWithoutBranchInput[]
    upsert?: OutgoingStockUpsertWithWhereUniqueWithoutBranchInput | OutgoingStockUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: OutgoingStockCreateManyBranchInputEnvelope
    set?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    disconnect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    delete?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    update?: OutgoingStockUpdateWithWhereUniqueWithoutBranchInput | OutgoingStockUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: OutgoingStockUpdateManyWithWhereWithoutBranchInput | OutgoingStockUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: OutgoingStockScalarWhereInput | OutgoingStockScalarWhereInput[]
  }

  export type InventoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<InventoryCreateWithoutCategoryInput, InventoryUncheckedCreateWithoutCategoryInput> | InventoryCreateWithoutCategoryInput[] | InventoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutCategoryInput | InventoryCreateOrConnectWithoutCategoryInput[]
    createMany?: InventoryCreateManyCategoryInputEnvelope
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
  }

  export type OutgoingStockCreateNestedManyWithoutCategoryInput = {
    create?: XOR<OutgoingStockCreateWithoutCategoryInput, OutgoingStockUncheckedCreateWithoutCategoryInput> | OutgoingStockCreateWithoutCategoryInput[] | OutgoingStockUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutCategoryInput | OutgoingStockCreateOrConnectWithoutCategoryInput[]
    createMany?: OutgoingStockCreateManyCategoryInputEnvelope
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
  }

  export type InventoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<InventoryCreateWithoutCategoryInput, InventoryUncheckedCreateWithoutCategoryInput> | InventoryCreateWithoutCategoryInput[] | InventoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutCategoryInput | InventoryCreateOrConnectWithoutCategoryInput[]
    createMany?: InventoryCreateManyCategoryInputEnvelope
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
  }

  export type OutgoingStockUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<OutgoingStockCreateWithoutCategoryInput, OutgoingStockUncheckedCreateWithoutCategoryInput> | OutgoingStockCreateWithoutCategoryInput[] | OutgoingStockUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutCategoryInput | OutgoingStockCreateOrConnectWithoutCategoryInput[]
    createMany?: OutgoingStockCreateManyCategoryInputEnvelope
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
  }

  export type InventoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<InventoryCreateWithoutCategoryInput, InventoryUncheckedCreateWithoutCategoryInput> | InventoryCreateWithoutCategoryInput[] | InventoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutCategoryInput | InventoryCreateOrConnectWithoutCategoryInput[]
    upsert?: InventoryUpsertWithWhereUniqueWithoutCategoryInput | InventoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: InventoryCreateManyCategoryInputEnvelope
    set?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    disconnect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    delete?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    update?: InventoryUpdateWithWhereUniqueWithoutCategoryInput | InventoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: InventoryUpdateManyWithWhereWithoutCategoryInput | InventoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
  }

  export type OutgoingStockUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<OutgoingStockCreateWithoutCategoryInput, OutgoingStockUncheckedCreateWithoutCategoryInput> | OutgoingStockCreateWithoutCategoryInput[] | OutgoingStockUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutCategoryInput | OutgoingStockCreateOrConnectWithoutCategoryInput[]
    upsert?: OutgoingStockUpsertWithWhereUniqueWithoutCategoryInput | OutgoingStockUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: OutgoingStockCreateManyCategoryInputEnvelope
    set?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    disconnect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    delete?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    update?: OutgoingStockUpdateWithWhereUniqueWithoutCategoryInput | OutgoingStockUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: OutgoingStockUpdateManyWithWhereWithoutCategoryInput | OutgoingStockUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: OutgoingStockScalarWhereInput | OutgoingStockScalarWhereInput[]
  }

  export type InventoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<InventoryCreateWithoutCategoryInput, InventoryUncheckedCreateWithoutCategoryInput> | InventoryCreateWithoutCategoryInput[] | InventoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutCategoryInput | InventoryCreateOrConnectWithoutCategoryInput[]
    upsert?: InventoryUpsertWithWhereUniqueWithoutCategoryInput | InventoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: InventoryCreateManyCategoryInputEnvelope
    set?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    disconnect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    delete?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    update?: InventoryUpdateWithWhereUniqueWithoutCategoryInput | InventoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: InventoryUpdateManyWithWhereWithoutCategoryInput | InventoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
  }

  export type OutgoingStockUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<OutgoingStockCreateWithoutCategoryInput, OutgoingStockUncheckedCreateWithoutCategoryInput> | OutgoingStockCreateWithoutCategoryInput[] | OutgoingStockUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutCategoryInput | OutgoingStockCreateOrConnectWithoutCategoryInput[]
    upsert?: OutgoingStockUpsertWithWhereUniqueWithoutCategoryInput | OutgoingStockUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: OutgoingStockCreateManyCategoryInputEnvelope
    set?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    disconnect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    delete?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    update?: OutgoingStockUpdateWithWhereUniqueWithoutCategoryInput | OutgoingStockUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: OutgoingStockUpdateManyWithWhereWithoutCategoryInput | OutgoingStockUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: OutgoingStockScalarWhereInput | OutgoingStockScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutInventoryInput = {
    create?: XOR<CategoryCreateWithoutInventoryInput, CategoryUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutInventoryInput
    connect?: CategoryWhereUniqueInput
  }

  export type SaleWeeklyCreateNestedManyWithoutItemInput = {
    create?: XOR<SaleWeeklyCreateWithoutItemInput, SaleWeeklyUncheckedCreateWithoutItemInput> | SaleWeeklyCreateWithoutItemInput[] | SaleWeeklyUncheckedCreateWithoutItemInput[]
    connectOrCreate?: SaleWeeklyCreateOrConnectWithoutItemInput | SaleWeeklyCreateOrConnectWithoutItemInput[]
    createMany?: SaleWeeklyCreateManyItemInputEnvelope
    connect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
  }

  export type OutgoingStockCreateNestedManyWithoutItemInput = {
    create?: XOR<OutgoingStockCreateWithoutItemInput, OutgoingStockUncheckedCreateWithoutItemInput> | OutgoingStockCreateWithoutItemInput[] | OutgoingStockUncheckedCreateWithoutItemInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutItemInput | OutgoingStockCreateOrConnectWithoutItemInput[]
    createMany?: OutgoingStockCreateManyItemInputEnvelope
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
  }

  export type SaleWeeklyUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<SaleWeeklyCreateWithoutItemInput, SaleWeeklyUncheckedCreateWithoutItemInput> | SaleWeeklyCreateWithoutItemInput[] | SaleWeeklyUncheckedCreateWithoutItemInput[]
    connectOrCreate?: SaleWeeklyCreateOrConnectWithoutItemInput | SaleWeeklyCreateOrConnectWithoutItemInput[]
    createMany?: SaleWeeklyCreateManyItemInputEnvelope
    connect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
  }

  export type OutgoingStockUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<OutgoingStockCreateWithoutItemInput, OutgoingStockUncheckedCreateWithoutItemInput> | OutgoingStockCreateWithoutItemInput[] | OutgoingStockUncheckedCreateWithoutItemInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutItemInput | OutgoingStockCreateOrConnectWithoutItemInput[]
    createMany?: OutgoingStockCreateManyItemInputEnvelope
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CategoryUpdateOneRequiredWithoutInventoryNestedInput = {
    create?: XOR<CategoryCreateWithoutInventoryInput, CategoryUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutInventoryInput
    upsert?: CategoryUpsertWithoutInventoryInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutInventoryInput, CategoryUpdateWithoutInventoryInput>, CategoryUncheckedUpdateWithoutInventoryInput>
  }

  export type SaleWeeklyUpdateManyWithoutItemNestedInput = {
    create?: XOR<SaleWeeklyCreateWithoutItemInput, SaleWeeklyUncheckedCreateWithoutItemInput> | SaleWeeklyCreateWithoutItemInput[] | SaleWeeklyUncheckedCreateWithoutItemInput[]
    connectOrCreate?: SaleWeeklyCreateOrConnectWithoutItemInput | SaleWeeklyCreateOrConnectWithoutItemInput[]
    upsert?: SaleWeeklyUpsertWithWhereUniqueWithoutItemInput | SaleWeeklyUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: SaleWeeklyCreateManyItemInputEnvelope
    set?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    disconnect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    delete?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    connect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    update?: SaleWeeklyUpdateWithWhereUniqueWithoutItemInput | SaleWeeklyUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: SaleWeeklyUpdateManyWithWhereWithoutItemInput | SaleWeeklyUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: SaleWeeklyScalarWhereInput | SaleWeeklyScalarWhereInput[]
  }

  export type OutgoingStockUpdateManyWithoutItemNestedInput = {
    create?: XOR<OutgoingStockCreateWithoutItemInput, OutgoingStockUncheckedCreateWithoutItemInput> | OutgoingStockCreateWithoutItemInput[] | OutgoingStockUncheckedCreateWithoutItemInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutItemInput | OutgoingStockCreateOrConnectWithoutItemInput[]
    upsert?: OutgoingStockUpsertWithWhereUniqueWithoutItemInput | OutgoingStockUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: OutgoingStockCreateManyItemInputEnvelope
    set?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    disconnect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    delete?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    update?: OutgoingStockUpdateWithWhereUniqueWithoutItemInput | OutgoingStockUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: OutgoingStockUpdateManyWithWhereWithoutItemInput | OutgoingStockUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: OutgoingStockScalarWhereInput | OutgoingStockScalarWhereInput[]
  }

  export type SaleWeeklyUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<SaleWeeklyCreateWithoutItemInput, SaleWeeklyUncheckedCreateWithoutItemInput> | SaleWeeklyCreateWithoutItemInput[] | SaleWeeklyUncheckedCreateWithoutItemInput[]
    connectOrCreate?: SaleWeeklyCreateOrConnectWithoutItemInput | SaleWeeklyCreateOrConnectWithoutItemInput[]
    upsert?: SaleWeeklyUpsertWithWhereUniqueWithoutItemInput | SaleWeeklyUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: SaleWeeklyCreateManyItemInputEnvelope
    set?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    disconnect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    delete?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    connect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    update?: SaleWeeklyUpdateWithWhereUniqueWithoutItemInput | SaleWeeklyUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: SaleWeeklyUpdateManyWithWhereWithoutItemInput | SaleWeeklyUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: SaleWeeklyScalarWhereInput | SaleWeeklyScalarWhereInput[]
  }

  export type OutgoingStockUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<OutgoingStockCreateWithoutItemInput, OutgoingStockUncheckedCreateWithoutItemInput> | OutgoingStockCreateWithoutItemInput[] | OutgoingStockUncheckedCreateWithoutItemInput[]
    connectOrCreate?: OutgoingStockCreateOrConnectWithoutItemInput | OutgoingStockCreateOrConnectWithoutItemInput[]
    upsert?: OutgoingStockUpsertWithWhereUniqueWithoutItemInput | OutgoingStockUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: OutgoingStockCreateManyItemInputEnvelope
    set?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    disconnect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    delete?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    connect?: OutgoingStockWhereUniqueInput | OutgoingStockWhereUniqueInput[]
    update?: OutgoingStockUpdateWithWhereUniqueWithoutItemInput | OutgoingStockUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: OutgoingStockUpdateManyWithWhereWithoutItemInput | OutgoingStockUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: OutgoingStockScalarWhereInput | OutgoingStockScalarWhereInput[]
  }

  export type SaleWeeklyCreateNestedManyWithoutPaymentInput = {
    create?: XOR<SaleWeeklyCreateWithoutPaymentInput, SaleWeeklyUncheckedCreateWithoutPaymentInput> | SaleWeeklyCreateWithoutPaymentInput[] | SaleWeeklyUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: SaleWeeklyCreateOrConnectWithoutPaymentInput | SaleWeeklyCreateOrConnectWithoutPaymentInput[]
    createMany?: SaleWeeklyCreateManyPaymentInputEnvelope
    connect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
  }

  export type SaleWeeklyUncheckedCreateNestedManyWithoutPaymentInput = {
    create?: XOR<SaleWeeklyCreateWithoutPaymentInput, SaleWeeklyUncheckedCreateWithoutPaymentInput> | SaleWeeklyCreateWithoutPaymentInput[] | SaleWeeklyUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: SaleWeeklyCreateOrConnectWithoutPaymentInput | SaleWeeklyCreateOrConnectWithoutPaymentInput[]
    createMany?: SaleWeeklyCreateManyPaymentInputEnvelope
    connect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
  }

  export type SaleWeeklyUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<SaleWeeklyCreateWithoutPaymentInput, SaleWeeklyUncheckedCreateWithoutPaymentInput> | SaleWeeklyCreateWithoutPaymentInput[] | SaleWeeklyUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: SaleWeeklyCreateOrConnectWithoutPaymentInput | SaleWeeklyCreateOrConnectWithoutPaymentInput[]
    upsert?: SaleWeeklyUpsertWithWhereUniqueWithoutPaymentInput | SaleWeeklyUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: SaleWeeklyCreateManyPaymentInputEnvelope
    set?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    disconnect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    delete?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    connect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    update?: SaleWeeklyUpdateWithWhereUniqueWithoutPaymentInput | SaleWeeklyUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: SaleWeeklyUpdateManyWithWhereWithoutPaymentInput | SaleWeeklyUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: SaleWeeklyScalarWhereInput | SaleWeeklyScalarWhereInput[]
  }

  export type SaleWeeklyUncheckedUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<SaleWeeklyCreateWithoutPaymentInput, SaleWeeklyUncheckedCreateWithoutPaymentInput> | SaleWeeklyCreateWithoutPaymentInput[] | SaleWeeklyUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: SaleWeeklyCreateOrConnectWithoutPaymentInput | SaleWeeklyCreateOrConnectWithoutPaymentInput[]
    upsert?: SaleWeeklyUpsertWithWhereUniqueWithoutPaymentInput | SaleWeeklyUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: SaleWeeklyCreateManyPaymentInputEnvelope
    set?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    disconnect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    delete?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    connect?: SaleWeeklyWhereUniqueInput | SaleWeeklyWhereUniqueInput[]
    update?: SaleWeeklyUpdateWithWhereUniqueWithoutPaymentInput | SaleWeeklyUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: SaleWeeklyUpdateManyWithWhereWithoutPaymentInput | SaleWeeklyUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: SaleWeeklyScalarWhereInput | SaleWeeklyScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSalesWeeklyInput = {
    create?: XOR<UserCreateWithoutSalesWeeklyInput, UserUncheckedCreateWithoutSalesWeeklyInput>
    connectOrCreate?: UserCreateOrConnectWithoutSalesWeeklyInput
    connect?: UserWhereUniqueInput
  }

  export type InventoryCreateNestedOneWithoutSalesWeeklyInput = {
    create?: XOR<InventoryCreateWithoutSalesWeeklyInput, InventoryUncheckedCreateWithoutSalesWeeklyInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutSalesWeeklyInput
    connect?: InventoryWhereUniqueInput
  }

  export type PaymentMethodCreateNestedOneWithoutSalesWeeklyInput = {
    create?: XOR<PaymentMethodCreateWithoutSalesWeeklyInput, PaymentMethodUncheckedCreateWithoutSalesWeeklyInput>
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutSalesWeeklyInput
    connect?: PaymentMethodWhereUniqueInput
  }

  export type UserUpdateOneWithoutSalesWeeklyNestedInput = {
    create?: XOR<UserCreateWithoutSalesWeeklyInput, UserUncheckedCreateWithoutSalesWeeklyInput>
    connectOrCreate?: UserCreateOrConnectWithoutSalesWeeklyInput
    upsert?: UserUpsertWithoutSalesWeeklyInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSalesWeeklyInput, UserUpdateWithoutSalesWeeklyInput>, UserUncheckedUpdateWithoutSalesWeeklyInput>
  }

  export type InventoryUpdateOneWithoutSalesWeeklyNestedInput = {
    create?: XOR<InventoryCreateWithoutSalesWeeklyInput, InventoryUncheckedCreateWithoutSalesWeeklyInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutSalesWeeklyInput
    upsert?: InventoryUpsertWithoutSalesWeeklyInput
    disconnect?: InventoryWhereInput | boolean
    delete?: InventoryWhereInput | boolean
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutSalesWeeklyInput, InventoryUpdateWithoutSalesWeeklyInput>, InventoryUncheckedUpdateWithoutSalesWeeklyInput>
  }

  export type PaymentMethodUpdateOneWithoutSalesWeeklyNestedInput = {
    create?: XOR<PaymentMethodCreateWithoutSalesWeeklyInput, PaymentMethodUncheckedCreateWithoutSalesWeeklyInput>
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutSalesWeeklyInput
    upsert?: PaymentMethodUpsertWithoutSalesWeeklyInput
    disconnect?: PaymentMethodWhereInput | boolean
    delete?: PaymentMethodWhereInput | boolean
    connect?: PaymentMethodWhereUniqueInput
    update?: XOR<XOR<PaymentMethodUpdateToOneWithWhereWithoutSalesWeeklyInput, PaymentMethodUpdateWithoutSalesWeeklyInput>, PaymentMethodUncheckedUpdateWithoutSalesWeeklyInput>
  }

  export type InventoryCreateNestedOneWithoutOutgoingStockInput = {
    create?: XOR<InventoryCreateWithoutOutgoingStockInput, InventoryUncheckedCreateWithoutOutgoingStockInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutOutgoingStockInput
    connect?: InventoryWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutOutgoingStockInput = {
    create?: XOR<CategoryCreateWithoutOutgoingStockInput, CategoryUncheckedCreateWithoutOutgoingStockInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutOutgoingStockInput
    connect?: CategoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOutgoingStockInput = {
    create?: XOR<UserCreateWithoutOutgoingStockInput, UserUncheckedCreateWithoutOutgoingStockInput>
    connectOrCreate?: UserCreateOrConnectWithoutOutgoingStockInput
    connect?: UserWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutOutgoingStockInput = {
    create?: XOR<BranchCreateWithoutOutgoingStockInput, BranchUncheckedCreateWithoutOutgoingStockInput>
    connectOrCreate?: BranchCreateOrConnectWithoutOutgoingStockInput
    connect?: BranchWhereUniqueInput
  }

  export type InventoryUpdateOneRequiredWithoutOutgoingStockNestedInput = {
    create?: XOR<InventoryCreateWithoutOutgoingStockInput, InventoryUncheckedCreateWithoutOutgoingStockInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutOutgoingStockInput
    upsert?: InventoryUpsertWithoutOutgoingStockInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutOutgoingStockInput, InventoryUpdateWithoutOutgoingStockInput>, InventoryUncheckedUpdateWithoutOutgoingStockInput>
  }

  export type CategoryUpdateOneRequiredWithoutOutgoingStockNestedInput = {
    create?: XOR<CategoryCreateWithoutOutgoingStockInput, CategoryUncheckedCreateWithoutOutgoingStockInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutOutgoingStockInput
    upsert?: CategoryUpsertWithoutOutgoingStockInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutOutgoingStockInput, CategoryUpdateWithoutOutgoingStockInput>, CategoryUncheckedUpdateWithoutOutgoingStockInput>
  }

  export type UserUpdateOneWithoutOutgoingStockNestedInput = {
    create?: XOR<UserCreateWithoutOutgoingStockInput, UserUncheckedCreateWithoutOutgoingStockInput>
    connectOrCreate?: UserCreateOrConnectWithoutOutgoingStockInput
    upsert?: UserUpsertWithoutOutgoingStockInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOutgoingStockInput, UserUpdateWithoutOutgoingStockInput>, UserUncheckedUpdateWithoutOutgoingStockInput>
  }

  export type BranchUpdateOneWithoutOutgoingStockNestedInput = {
    create?: XOR<BranchCreateWithoutOutgoingStockInput, BranchUncheckedCreateWithoutOutgoingStockInput>
    connectOrCreate?: BranchCreateOrConnectWithoutOutgoingStockInput
    upsert?: BranchUpsertWithoutOutgoingStockInput
    disconnect?: BranchWhereInput | boolean
    delete?: BranchWhereInput | boolean
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutOutgoingStockInput, BranchUpdateWithoutOutgoingStockInput>, BranchUncheckedUpdateWithoutOutgoingStockInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SaleWeeklyCreateWithoutUserInput = {
    id: string
    category?: string | null
    quantity?: number
    price?: number
    timeStamp?: Date | string | null
    item?: InventoryCreateNestedOneWithoutSalesWeeklyInput
    payment?: PaymentMethodCreateNestedOneWithoutSalesWeeklyInput
  }

  export type SaleWeeklyUncheckedCreateWithoutUserInput = {
    id: string
    itemName?: string | null
    category?: string | null
    quantity?: number
    price?: number
    timeStamp?: Date | string | null
    paymentMethod?: string | null
  }

  export type SaleWeeklyCreateOrConnectWithoutUserInput = {
    where: SaleWeeklyWhereUniqueInput
    create: XOR<SaleWeeklyCreateWithoutUserInput, SaleWeeklyUncheckedCreateWithoutUserInput>
  }

  export type SaleWeeklyCreateManyUserInputEnvelope = {
    data: SaleWeeklyCreateManyUserInput | SaleWeeklyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OutgoingStockCreateWithoutUserInput = {
    id: string
    quantity: number
    timeStamp?: Date | string | null
    item: InventoryCreateNestedOneWithoutOutgoingStockInput
    category: CategoryCreateNestedOneWithoutOutgoingStockInput
    branch?: BranchCreateNestedOneWithoutOutgoingStockInput
  }

  export type OutgoingStockUncheckedCreateWithoutUserInput = {
    id: string
    itemName: string
    categoryName: string
    branchName?: string | null
    quantity: number
    timeStamp?: Date | string | null
  }

  export type OutgoingStockCreateOrConnectWithoutUserInput = {
    where: OutgoingStockWhereUniqueInput
    create: XOR<OutgoingStockCreateWithoutUserInput, OutgoingStockUncheckedCreateWithoutUserInput>
  }

  export type OutgoingStockCreateManyUserInputEnvelope = {
    data: OutgoingStockCreateManyUserInput | OutgoingStockCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SaleWeeklyUpsertWithWhereUniqueWithoutUserInput = {
    where: SaleWeeklyWhereUniqueInput
    update: XOR<SaleWeeklyUpdateWithoutUserInput, SaleWeeklyUncheckedUpdateWithoutUserInput>
    create: XOR<SaleWeeklyCreateWithoutUserInput, SaleWeeklyUncheckedCreateWithoutUserInput>
  }

  export type SaleWeeklyUpdateWithWhereUniqueWithoutUserInput = {
    where: SaleWeeklyWhereUniqueInput
    data: XOR<SaleWeeklyUpdateWithoutUserInput, SaleWeeklyUncheckedUpdateWithoutUserInput>
  }

  export type SaleWeeklyUpdateManyWithWhereWithoutUserInput = {
    where: SaleWeeklyScalarWhereInput
    data: XOR<SaleWeeklyUpdateManyMutationInput, SaleWeeklyUncheckedUpdateManyWithoutUserInput>
  }

  export type SaleWeeklyScalarWhereInput = {
    AND?: SaleWeeklyScalarWhereInput | SaleWeeklyScalarWhereInput[]
    OR?: SaleWeeklyScalarWhereInput[]
    NOT?: SaleWeeklyScalarWhereInput | SaleWeeklyScalarWhereInput[]
    id?: StringFilter<"SaleWeekly"> | string
    itemName?: StringNullableFilter<"SaleWeekly"> | string | null
    category?: StringNullableFilter<"SaleWeekly"> | string | null
    quantity?: IntFilter<"SaleWeekly"> | number
    price?: IntFilter<"SaleWeekly"> | number
    userName?: StringNullableFilter<"SaleWeekly"> | string | null
    timeStamp?: DateTimeNullableFilter<"SaleWeekly"> | Date | string | null
    paymentMethod?: StringNullableFilter<"SaleWeekly"> | string | null
  }

  export type OutgoingStockUpsertWithWhereUniqueWithoutUserInput = {
    where: OutgoingStockWhereUniqueInput
    update: XOR<OutgoingStockUpdateWithoutUserInput, OutgoingStockUncheckedUpdateWithoutUserInput>
    create: XOR<OutgoingStockCreateWithoutUserInput, OutgoingStockUncheckedCreateWithoutUserInput>
  }

  export type OutgoingStockUpdateWithWhereUniqueWithoutUserInput = {
    where: OutgoingStockWhereUniqueInput
    data: XOR<OutgoingStockUpdateWithoutUserInput, OutgoingStockUncheckedUpdateWithoutUserInput>
  }

  export type OutgoingStockUpdateManyWithWhereWithoutUserInput = {
    where: OutgoingStockScalarWhereInput
    data: XOR<OutgoingStockUpdateManyMutationInput, OutgoingStockUncheckedUpdateManyWithoutUserInput>
  }

  export type OutgoingStockScalarWhereInput = {
    AND?: OutgoingStockScalarWhereInput | OutgoingStockScalarWhereInput[]
    OR?: OutgoingStockScalarWhereInput[]
    NOT?: OutgoingStockScalarWhereInput | OutgoingStockScalarWhereInput[]
    id?: StringFilter<"OutgoingStock"> | string
    itemName?: StringFilter<"OutgoingStock"> | string
    categoryName?: StringFilter<"OutgoingStock"> | string
    userName?: StringNullableFilter<"OutgoingStock"> | string | null
    branchName?: StringNullableFilter<"OutgoingStock"> | string | null
    quantity?: IntFilter<"OutgoingStock"> | number
    timeStamp?: DateTimeNullableFilter<"OutgoingStock"> | Date | string | null
  }

  export type OutgoingStockCreateWithoutBranchInput = {
    id: string
    quantity: number
    timeStamp?: Date | string | null
    item: InventoryCreateNestedOneWithoutOutgoingStockInput
    category: CategoryCreateNestedOneWithoutOutgoingStockInput
    user?: UserCreateNestedOneWithoutOutgoingStockInput
  }

  export type OutgoingStockUncheckedCreateWithoutBranchInput = {
    id: string
    itemName: string
    categoryName: string
    userName?: string | null
    quantity: number
    timeStamp?: Date | string | null
  }

  export type OutgoingStockCreateOrConnectWithoutBranchInput = {
    where: OutgoingStockWhereUniqueInput
    create: XOR<OutgoingStockCreateWithoutBranchInput, OutgoingStockUncheckedCreateWithoutBranchInput>
  }

  export type OutgoingStockCreateManyBranchInputEnvelope = {
    data: OutgoingStockCreateManyBranchInput | OutgoingStockCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type OutgoingStockUpsertWithWhereUniqueWithoutBranchInput = {
    where: OutgoingStockWhereUniqueInput
    update: XOR<OutgoingStockUpdateWithoutBranchInput, OutgoingStockUncheckedUpdateWithoutBranchInput>
    create: XOR<OutgoingStockCreateWithoutBranchInput, OutgoingStockUncheckedCreateWithoutBranchInput>
  }

  export type OutgoingStockUpdateWithWhereUniqueWithoutBranchInput = {
    where: OutgoingStockWhereUniqueInput
    data: XOR<OutgoingStockUpdateWithoutBranchInput, OutgoingStockUncheckedUpdateWithoutBranchInput>
  }

  export type OutgoingStockUpdateManyWithWhereWithoutBranchInput = {
    where: OutgoingStockScalarWhereInput
    data: XOR<OutgoingStockUpdateManyMutationInput, OutgoingStockUncheckedUpdateManyWithoutBranchInput>
  }

  export type InventoryCreateWithoutCategoryInput = {
    name: string
    id: string
    inventoryQuantity?: number
    incomingTimeStamp?: Date | string | null
    recentEntry?: number
    recentEntryAt?: Date | string | null
    salesWeekly?: SaleWeeklyCreateNestedManyWithoutItemInput
    outgoingStock?: OutgoingStockCreateNestedManyWithoutItemInput
  }

  export type InventoryUncheckedCreateWithoutCategoryInput = {
    name: string
    id: string
    inventoryQuantity?: number
    incomingTimeStamp?: Date | string | null
    recentEntry?: number
    recentEntryAt?: Date | string | null
    salesWeekly?: SaleWeeklyUncheckedCreateNestedManyWithoutItemInput
    outgoingStock?: OutgoingStockUncheckedCreateNestedManyWithoutItemInput
  }

  export type InventoryCreateOrConnectWithoutCategoryInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutCategoryInput, InventoryUncheckedCreateWithoutCategoryInput>
  }

  export type InventoryCreateManyCategoryInputEnvelope = {
    data: InventoryCreateManyCategoryInput | InventoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type OutgoingStockCreateWithoutCategoryInput = {
    id: string
    quantity: number
    timeStamp?: Date | string | null
    item: InventoryCreateNestedOneWithoutOutgoingStockInput
    user?: UserCreateNestedOneWithoutOutgoingStockInput
    branch?: BranchCreateNestedOneWithoutOutgoingStockInput
  }

  export type OutgoingStockUncheckedCreateWithoutCategoryInput = {
    id: string
    itemName: string
    userName?: string | null
    branchName?: string | null
    quantity: number
    timeStamp?: Date | string | null
  }

  export type OutgoingStockCreateOrConnectWithoutCategoryInput = {
    where: OutgoingStockWhereUniqueInput
    create: XOR<OutgoingStockCreateWithoutCategoryInput, OutgoingStockUncheckedCreateWithoutCategoryInput>
  }

  export type OutgoingStockCreateManyCategoryInputEnvelope = {
    data: OutgoingStockCreateManyCategoryInput | OutgoingStockCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type InventoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: InventoryWhereUniqueInput
    update: XOR<InventoryUpdateWithoutCategoryInput, InventoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<InventoryCreateWithoutCategoryInput, InventoryUncheckedCreateWithoutCategoryInput>
  }

  export type InventoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: InventoryWhereUniqueInput
    data: XOR<InventoryUpdateWithoutCategoryInput, InventoryUncheckedUpdateWithoutCategoryInput>
  }

  export type InventoryUpdateManyWithWhereWithoutCategoryInput = {
    where: InventoryScalarWhereInput
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type InventoryScalarWhereInput = {
    AND?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
    OR?: InventoryScalarWhereInput[]
    NOT?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
    name?: StringFilter<"Inventory"> | string
    id?: StringFilter<"Inventory"> | string
    categoryName?: StringFilter<"Inventory"> | string
    inventoryQuantity?: IntFilter<"Inventory"> | number
    incomingTimeStamp?: DateTimeNullableFilter<"Inventory"> | Date | string | null
    recentEntry?: IntFilter<"Inventory"> | number
    recentEntryAt?: DateTimeNullableFilter<"Inventory"> | Date | string | null
  }

  export type OutgoingStockUpsertWithWhereUniqueWithoutCategoryInput = {
    where: OutgoingStockWhereUniqueInput
    update: XOR<OutgoingStockUpdateWithoutCategoryInput, OutgoingStockUncheckedUpdateWithoutCategoryInput>
    create: XOR<OutgoingStockCreateWithoutCategoryInput, OutgoingStockUncheckedCreateWithoutCategoryInput>
  }

  export type OutgoingStockUpdateWithWhereUniqueWithoutCategoryInput = {
    where: OutgoingStockWhereUniqueInput
    data: XOR<OutgoingStockUpdateWithoutCategoryInput, OutgoingStockUncheckedUpdateWithoutCategoryInput>
  }

  export type OutgoingStockUpdateManyWithWhereWithoutCategoryInput = {
    where: OutgoingStockScalarWhereInput
    data: XOR<OutgoingStockUpdateManyMutationInput, OutgoingStockUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CategoryCreateWithoutInventoryInput = {
    name: string
    id: string
    percentage?: string | null
    outgoingStock?: OutgoingStockCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutInventoryInput = {
    name: string
    id: string
    percentage?: string | null
    outgoingStock?: OutgoingStockUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutInventoryInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutInventoryInput, CategoryUncheckedCreateWithoutInventoryInput>
  }

  export type SaleWeeklyCreateWithoutItemInput = {
    id: string
    category?: string | null
    quantity?: number
    price?: number
    timeStamp?: Date | string | null
    user?: UserCreateNestedOneWithoutSalesWeeklyInput
    payment?: PaymentMethodCreateNestedOneWithoutSalesWeeklyInput
  }

  export type SaleWeeklyUncheckedCreateWithoutItemInput = {
    id: string
    category?: string | null
    quantity?: number
    price?: number
    userName?: string | null
    timeStamp?: Date | string | null
    paymentMethod?: string | null
  }

  export type SaleWeeklyCreateOrConnectWithoutItemInput = {
    where: SaleWeeklyWhereUniqueInput
    create: XOR<SaleWeeklyCreateWithoutItemInput, SaleWeeklyUncheckedCreateWithoutItemInput>
  }

  export type SaleWeeklyCreateManyItemInputEnvelope = {
    data: SaleWeeklyCreateManyItemInput | SaleWeeklyCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type OutgoingStockCreateWithoutItemInput = {
    id: string
    quantity: number
    timeStamp?: Date | string | null
    category: CategoryCreateNestedOneWithoutOutgoingStockInput
    user?: UserCreateNestedOneWithoutOutgoingStockInput
    branch?: BranchCreateNestedOneWithoutOutgoingStockInput
  }

  export type OutgoingStockUncheckedCreateWithoutItemInput = {
    id: string
    categoryName: string
    userName?: string | null
    branchName?: string | null
    quantity: number
    timeStamp?: Date | string | null
  }

  export type OutgoingStockCreateOrConnectWithoutItemInput = {
    where: OutgoingStockWhereUniqueInput
    create: XOR<OutgoingStockCreateWithoutItemInput, OutgoingStockUncheckedCreateWithoutItemInput>
  }

  export type OutgoingStockCreateManyItemInputEnvelope = {
    data: OutgoingStockCreateManyItemInput | OutgoingStockCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutInventoryInput = {
    update: XOR<CategoryUpdateWithoutInventoryInput, CategoryUncheckedUpdateWithoutInventoryInput>
    create: XOR<CategoryCreateWithoutInventoryInput, CategoryUncheckedCreateWithoutInventoryInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutInventoryInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutInventoryInput, CategoryUncheckedUpdateWithoutInventoryInput>
  }

  export type CategoryUpdateWithoutInventoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    percentage?: NullableStringFieldUpdateOperationsInput | string | null
    outgoingStock?: OutgoingStockUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutInventoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    percentage?: NullableStringFieldUpdateOperationsInput | string | null
    outgoingStock?: OutgoingStockUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type SaleWeeklyUpsertWithWhereUniqueWithoutItemInput = {
    where: SaleWeeklyWhereUniqueInput
    update: XOR<SaleWeeklyUpdateWithoutItemInput, SaleWeeklyUncheckedUpdateWithoutItemInput>
    create: XOR<SaleWeeklyCreateWithoutItemInput, SaleWeeklyUncheckedCreateWithoutItemInput>
  }

  export type SaleWeeklyUpdateWithWhereUniqueWithoutItemInput = {
    where: SaleWeeklyWhereUniqueInput
    data: XOR<SaleWeeklyUpdateWithoutItemInput, SaleWeeklyUncheckedUpdateWithoutItemInput>
  }

  export type SaleWeeklyUpdateManyWithWhereWithoutItemInput = {
    where: SaleWeeklyScalarWhereInput
    data: XOR<SaleWeeklyUpdateManyMutationInput, SaleWeeklyUncheckedUpdateManyWithoutItemInput>
  }

  export type OutgoingStockUpsertWithWhereUniqueWithoutItemInput = {
    where: OutgoingStockWhereUniqueInput
    update: XOR<OutgoingStockUpdateWithoutItemInput, OutgoingStockUncheckedUpdateWithoutItemInput>
    create: XOR<OutgoingStockCreateWithoutItemInput, OutgoingStockUncheckedCreateWithoutItemInput>
  }

  export type OutgoingStockUpdateWithWhereUniqueWithoutItemInput = {
    where: OutgoingStockWhereUniqueInput
    data: XOR<OutgoingStockUpdateWithoutItemInput, OutgoingStockUncheckedUpdateWithoutItemInput>
  }

  export type OutgoingStockUpdateManyWithWhereWithoutItemInput = {
    where: OutgoingStockScalarWhereInput
    data: XOR<OutgoingStockUpdateManyMutationInput, OutgoingStockUncheckedUpdateManyWithoutItemInput>
  }

  export type SaleWeeklyCreateWithoutPaymentInput = {
    id: string
    category?: string | null
    quantity?: number
    price?: number
    timeStamp?: Date | string | null
    user?: UserCreateNestedOneWithoutSalesWeeklyInput
    item?: InventoryCreateNestedOneWithoutSalesWeeklyInput
  }

  export type SaleWeeklyUncheckedCreateWithoutPaymentInput = {
    id: string
    itemName?: string | null
    category?: string | null
    quantity?: number
    price?: number
    userName?: string | null
    timeStamp?: Date | string | null
  }

  export type SaleWeeklyCreateOrConnectWithoutPaymentInput = {
    where: SaleWeeklyWhereUniqueInput
    create: XOR<SaleWeeklyCreateWithoutPaymentInput, SaleWeeklyUncheckedCreateWithoutPaymentInput>
  }

  export type SaleWeeklyCreateManyPaymentInputEnvelope = {
    data: SaleWeeklyCreateManyPaymentInput | SaleWeeklyCreateManyPaymentInput[]
    skipDuplicates?: boolean
  }

  export type SaleWeeklyUpsertWithWhereUniqueWithoutPaymentInput = {
    where: SaleWeeklyWhereUniqueInput
    update: XOR<SaleWeeklyUpdateWithoutPaymentInput, SaleWeeklyUncheckedUpdateWithoutPaymentInput>
    create: XOR<SaleWeeklyCreateWithoutPaymentInput, SaleWeeklyUncheckedCreateWithoutPaymentInput>
  }

  export type SaleWeeklyUpdateWithWhereUniqueWithoutPaymentInput = {
    where: SaleWeeklyWhereUniqueInput
    data: XOR<SaleWeeklyUpdateWithoutPaymentInput, SaleWeeklyUncheckedUpdateWithoutPaymentInput>
  }

  export type SaleWeeklyUpdateManyWithWhereWithoutPaymentInput = {
    where: SaleWeeklyScalarWhereInput
    data: XOR<SaleWeeklyUpdateManyMutationInput, SaleWeeklyUncheckedUpdateManyWithoutPaymentInput>
  }

  export type UserCreateWithoutSalesWeeklyInput = {
    name: string
    id: string
    password?: string | null
    accessControl?: string | null
    email: string
    outgoingStock?: OutgoingStockCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSalesWeeklyInput = {
    name: string
    id: string
    password?: string | null
    accessControl?: string | null
    email: string
    outgoingStock?: OutgoingStockUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSalesWeeklyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSalesWeeklyInput, UserUncheckedCreateWithoutSalesWeeklyInput>
  }

  export type InventoryCreateWithoutSalesWeeklyInput = {
    name: string
    id: string
    inventoryQuantity?: number
    incomingTimeStamp?: Date | string | null
    recentEntry?: number
    recentEntryAt?: Date | string | null
    category: CategoryCreateNestedOneWithoutInventoryInput
    outgoingStock?: OutgoingStockCreateNestedManyWithoutItemInput
  }

  export type InventoryUncheckedCreateWithoutSalesWeeklyInput = {
    name: string
    id: string
    categoryName: string
    inventoryQuantity?: number
    incomingTimeStamp?: Date | string | null
    recentEntry?: number
    recentEntryAt?: Date | string | null
    outgoingStock?: OutgoingStockUncheckedCreateNestedManyWithoutItemInput
  }

  export type InventoryCreateOrConnectWithoutSalesWeeklyInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutSalesWeeklyInput, InventoryUncheckedCreateWithoutSalesWeeklyInput>
  }

  export type PaymentMethodCreateWithoutSalesWeeklyInput = {
    name: string
    paymentId?: string | null
    totalWeekly?: number
  }

  export type PaymentMethodUncheckedCreateWithoutSalesWeeklyInput = {
    name: string
    paymentId?: string | null
    totalWeekly?: number
  }

  export type PaymentMethodCreateOrConnectWithoutSalesWeeklyInput = {
    where: PaymentMethodWhereUniqueInput
    create: XOR<PaymentMethodCreateWithoutSalesWeeklyInput, PaymentMethodUncheckedCreateWithoutSalesWeeklyInput>
  }

  export type UserUpsertWithoutSalesWeeklyInput = {
    update: XOR<UserUpdateWithoutSalesWeeklyInput, UserUncheckedUpdateWithoutSalesWeeklyInput>
    create: XOR<UserCreateWithoutSalesWeeklyInput, UserUncheckedCreateWithoutSalesWeeklyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSalesWeeklyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSalesWeeklyInput, UserUncheckedUpdateWithoutSalesWeeklyInput>
  }

  export type UserUpdateWithoutSalesWeeklyInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessControl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    outgoingStock?: OutgoingStockUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSalesWeeklyInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessControl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    outgoingStock?: OutgoingStockUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InventoryUpsertWithoutSalesWeeklyInput = {
    update: XOR<InventoryUpdateWithoutSalesWeeklyInput, InventoryUncheckedUpdateWithoutSalesWeeklyInput>
    create: XOR<InventoryCreateWithoutSalesWeeklyInput, InventoryUncheckedCreateWithoutSalesWeeklyInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutSalesWeeklyInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutSalesWeeklyInput, InventoryUncheckedUpdateWithoutSalesWeeklyInput>
  }

  export type InventoryUpdateWithoutSalesWeeklyInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    inventoryQuantity?: IntFieldUpdateOperationsInput | number
    incomingTimeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recentEntry?: IntFieldUpdateOperationsInput | number
    recentEntryAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneRequiredWithoutInventoryNestedInput
    outgoingStock?: OutgoingStockUpdateManyWithoutItemNestedInput
  }

  export type InventoryUncheckedUpdateWithoutSalesWeeklyInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    inventoryQuantity?: IntFieldUpdateOperationsInput | number
    incomingTimeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recentEntry?: IntFieldUpdateOperationsInput | number
    recentEntryAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    outgoingStock?: OutgoingStockUncheckedUpdateManyWithoutItemNestedInput
  }

  export type PaymentMethodUpsertWithoutSalesWeeklyInput = {
    update: XOR<PaymentMethodUpdateWithoutSalesWeeklyInput, PaymentMethodUncheckedUpdateWithoutSalesWeeklyInput>
    create: XOR<PaymentMethodCreateWithoutSalesWeeklyInput, PaymentMethodUncheckedCreateWithoutSalesWeeklyInput>
    where?: PaymentMethodWhereInput
  }

  export type PaymentMethodUpdateToOneWithWhereWithoutSalesWeeklyInput = {
    where?: PaymentMethodWhereInput
    data: XOR<PaymentMethodUpdateWithoutSalesWeeklyInput, PaymentMethodUncheckedUpdateWithoutSalesWeeklyInput>
  }

  export type PaymentMethodUpdateWithoutSalesWeeklyInput = {
    name?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    totalWeekly?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentMethodUncheckedUpdateWithoutSalesWeeklyInput = {
    name?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    totalWeekly?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCreateWithoutOutgoingStockInput = {
    name: string
    id: string
    inventoryQuantity?: number
    incomingTimeStamp?: Date | string | null
    recentEntry?: number
    recentEntryAt?: Date | string | null
    category: CategoryCreateNestedOneWithoutInventoryInput
    salesWeekly?: SaleWeeklyCreateNestedManyWithoutItemInput
  }

  export type InventoryUncheckedCreateWithoutOutgoingStockInput = {
    name: string
    id: string
    categoryName: string
    inventoryQuantity?: number
    incomingTimeStamp?: Date | string | null
    recentEntry?: number
    recentEntryAt?: Date | string | null
    salesWeekly?: SaleWeeklyUncheckedCreateNestedManyWithoutItemInput
  }

  export type InventoryCreateOrConnectWithoutOutgoingStockInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutOutgoingStockInput, InventoryUncheckedCreateWithoutOutgoingStockInput>
  }

  export type CategoryCreateWithoutOutgoingStockInput = {
    name: string
    id: string
    percentage?: string | null
    inventory?: InventoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutOutgoingStockInput = {
    name: string
    id: string
    percentage?: string | null
    inventory?: InventoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutOutgoingStockInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutOutgoingStockInput, CategoryUncheckedCreateWithoutOutgoingStockInput>
  }

  export type UserCreateWithoutOutgoingStockInput = {
    name: string
    id: string
    password?: string | null
    accessControl?: string | null
    email: string
    salesWeekly?: SaleWeeklyCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOutgoingStockInput = {
    name: string
    id: string
    password?: string | null
    accessControl?: string | null
    email: string
    salesWeekly?: SaleWeeklyUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOutgoingStockInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOutgoingStockInput, UserUncheckedCreateWithoutOutgoingStockInput>
  }

  export type BranchCreateWithoutOutgoingStockInput = {
    name: string
    id: string
  }

  export type BranchUncheckedCreateWithoutOutgoingStockInput = {
    name: string
    id: string
  }

  export type BranchCreateOrConnectWithoutOutgoingStockInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutOutgoingStockInput, BranchUncheckedCreateWithoutOutgoingStockInput>
  }

  export type InventoryUpsertWithoutOutgoingStockInput = {
    update: XOR<InventoryUpdateWithoutOutgoingStockInput, InventoryUncheckedUpdateWithoutOutgoingStockInput>
    create: XOR<InventoryCreateWithoutOutgoingStockInput, InventoryUncheckedCreateWithoutOutgoingStockInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutOutgoingStockInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutOutgoingStockInput, InventoryUncheckedUpdateWithoutOutgoingStockInput>
  }

  export type InventoryUpdateWithoutOutgoingStockInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    inventoryQuantity?: IntFieldUpdateOperationsInput | number
    incomingTimeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recentEntry?: IntFieldUpdateOperationsInput | number
    recentEntryAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneRequiredWithoutInventoryNestedInput
    salesWeekly?: SaleWeeklyUpdateManyWithoutItemNestedInput
  }

  export type InventoryUncheckedUpdateWithoutOutgoingStockInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    inventoryQuantity?: IntFieldUpdateOperationsInput | number
    incomingTimeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recentEntry?: IntFieldUpdateOperationsInput | number
    recentEntryAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salesWeekly?: SaleWeeklyUncheckedUpdateManyWithoutItemNestedInput
  }

  export type CategoryUpsertWithoutOutgoingStockInput = {
    update: XOR<CategoryUpdateWithoutOutgoingStockInput, CategoryUncheckedUpdateWithoutOutgoingStockInput>
    create: XOR<CategoryCreateWithoutOutgoingStockInput, CategoryUncheckedCreateWithoutOutgoingStockInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutOutgoingStockInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutOutgoingStockInput, CategoryUncheckedUpdateWithoutOutgoingStockInput>
  }

  export type CategoryUpdateWithoutOutgoingStockInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    percentage?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutOutgoingStockInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    percentage?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type UserUpsertWithoutOutgoingStockInput = {
    update: XOR<UserUpdateWithoutOutgoingStockInput, UserUncheckedUpdateWithoutOutgoingStockInput>
    create: XOR<UserCreateWithoutOutgoingStockInput, UserUncheckedCreateWithoutOutgoingStockInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOutgoingStockInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOutgoingStockInput, UserUncheckedUpdateWithoutOutgoingStockInput>
  }

  export type UserUpdateWithoutOutgoingStockInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessControl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    salesWeekly?: SaleWeeklyUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOutgoingStockInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessControl?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    salesWeekly?: SaleWeeklyUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BranchUpsertWithoutOutgoingStockInput = {
    update: XOR<BranchUpdateWithoutOutgoingStockInput, BranchUncheckedUpdateWithoutOutgoingStockInput>
    create: XOR<BranchCreateWithoutOutgoingStockInput, BranchUncheckedCreateWithoutOutgoingStockInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutOutgoingStockInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutOutgoingStockInput, BranchUncheckedUpdateWithoutOutgoingStockInput>
  }

  export type BranchUpdateWithoutOutgoingStockInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type BranchUncheckedUpdateWithoutOutgoingStockInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type SaleWeeklyCreateManyUserInput = {
    id: string
    itemName?: string | null
    category?: string | null
    quantity?: number
    price?: number
    timeStamp?: Date | string | null
    paymentMethod?: string | null
  }

  export type OutgoingStockCreateManyUserInput = {
    id: string
    itemName: string
    categoryName: string
    branchName?: string | null
    quantity: number
    timeStamp?: Date | string | null
  }

  export type SaleWeeklyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    item?: InventoryUpdateOneWithoutSalesWeeklyNestedInput
    payment?: PaymentMethodUpdateOneWithoutSalesWeeklyNestedInput
  }

  export type SaleWeeklyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SaleWeeklyUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OutgoingStockUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    item?: InventoryUpdateOneRequiredWithoutOutgoingStockNestedInput
    category?: CategoryUpdateOneRequiredWithoutOutgoingStockNestedInput
    branch?: BranchUpdateOneWithoutOutgoingStockNestedInput
  }

  export type OutgoingStockUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OutgoingStockUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OutgoingStockCreateManyBranchInput = {
    id: string
    itemName: string
    categoryName: string
    userName?: string | null
    quantity: number
    timeStamp?: Date | string | null
  }

  export type OutgoingStockUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    item?: InventoryUpdateOneRequiredWithoutOutgoingStockNestedInput
    category?: CategoryUpdateOneRequiredWithoutOutgoingStockNestedInput
    user?: UserUpdateOneWithoutOutgoingStockNestedInput
  }

  export type OutgoingStockUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OutgoingStockUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InventoryCreateManyCategoryInput = {
    name: string
    id: string
    inventoryQuantity?: number
    incomingTimeStamp?: Date | string | null
    recentEntry?: number
    recentEntryAt?: Date | string | null
  }

  export type OutgoingStockCreateManyCategoryInput = {
    id: string
    itemName: string
    userName?: string | null
    branchName?: string | null
    quantity: number
    timeStamp?: Date | string | null
  }

  export type InventoryUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    inventoryQuantity?: IntFieldUpdateOperationsInput | number
    incomingTimeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recentEntry?: IntFieldUpdateOperationsInput | number
    recentEntryAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salesWeekly?: SaleWeeklyUpdateManyWithoutItemNestedInput
    outgoingStock?: OutgoingStockUpdateManyWithoutItemNestedInput
  }

  export type InventoryUncheckedUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    inventoryQuantity?: IntFieldUpdateOperationsInput | number
    incomingTimeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recentEntry?: IntFieldUpdateOperationsInput | number
    recentEntryAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salesWeekly?: SaleWeeklyUncheckedUpdateManyWithoutItemNestedInput
    outgoingStock?: OutgoingStockUncheckedUpdateManyWithoutItemNestedInput
  }

  export type InventoryUncheckedUpdateManyWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    inventoryQuantity?: IntFieldUpdateOperationsInput | number
    incomingTimeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recentEntry?: IntFieldUpdateOperationsInput | number
    recentEntryAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OutgoingStockUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    item?: InventoryUpdateOneRequiredWithoutOutgoingStockNestedInput
    user?: UserUpdateOneWithoutOutgoingStockNestedInput
    branch?: BranchUpdateOneWithoutOutgoingStockNestedInput
  }

  export type OutgoingStockUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OutgoingStockUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: StringFieldUpdateOperationsInput | string
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SaleWeeklyCreateManyItemInput = {
    id: string
    category?: string | null
    quantity?: number
    price?: number
    userName?: string | null
    timeStamp?: Date | string | null
    paymentMethod?: string | null
  }

  export type OutgoingStockCreateManyItemInput = {
    id: string
    categoryName: string
    userName?: string | null
    branchName?: string | null
    quantity: number
    timeStamp?: Date | string | null
  }

  export type SaleWeeklyUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutSalesWeeklyNestedInput
    payment?: PaymentMethodUpdateOneWithoutSalesWeeklyNestedInput
  }

  export type SaleWeeklyUncheckedUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SaleWeeklyUncheckedUpdateManyWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OutgoingStockUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    category?: CategoryUpdateOneRequiredWithoutOutgoingStockNestedInput
    user?: UserUpdateOneWithoutOutgoingStockNestedInput
    branch?: BranchUpdateOneWithoutOutgoingStockNestedInput
  }

  export type OutgoingStockUncheckedUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OutgoingStockUncheckedUpdateManyWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    branchName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SaleWeeklyCreateManyPaymentInput = {
    id: string
    itemName?: string | null
    category?: string | null
    quantity?: number
    price?: number
    userName?: string | null
    timeStamp?: Date | string | null
  }

  export type SaleWeeklyUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutSalesWeeklyNestedInput
    item?: InventoryUpdateOneWithoutSalesWeeklyNestedInput
  }

  export type SaleWeeklyUncheckedUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SaleWeeklyUncheckedUpdateManyWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemName?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    userName?: NullableStringFieldUpdateOperationsInput | string | null
    timeStamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BranchCountOutputTypeDefaultArgs instead
     */
    export type BranchCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BranchCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryCountOutputTypeDefaultArgs instead
     */
    export type InventoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentMethodCountOutputTypeDefaultArgs instead
     */
    export type PaymentMethodCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentMethodCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BranchDefaultArgs instead
     */
    export type BranchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BranchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryDefaultArgs instead
     */
    export type InventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentMethodDefaultArgs instead
     */
    export type PaymentMethodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentMethodDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SaleWeeklyDefaultArgs instead
     */
    export type SaleWeeklyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SaleWeeklyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OutgoingStockDefaultArgs instead
     */
    export type OutgoingStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OutgoingStockDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RemarkDefaultArgs instead
     */
    export type RemarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RemarkDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}